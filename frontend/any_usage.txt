D:\Development\github\ReViewPoint\frontend\src\components\auth\AuthGuard.tsx:72:// Check if user needs ANY of the specified roles
D:\Development\github\ReViewPoint\frontend\src\components\auth\AuthGuard.tsx:159:* Renders children only if user has any of the specified roles
D:\Development\github\ReViewPoint\frontend\src\components\file-management\FileSearchFilters.tsx:255:<span className="text-sm text-foreground">Any size</span>
D:\Development\github\ReViewPoint\frontend\src\components\ui\data-table.tsx:305:(row as any)?.id || (row as any)?.key || `row-${index}`;
D:\Development\github\ReViewPoint\frontend\src\components\ui\file-upload.tsx:334:// Remove any hardcoded color values
D:\Development\github\ReViewPoint\frontend\src\components\ui\toast.tsx:156:error: string | ((error: any) => string);
D:\Development\github\ReViewPoint\frontend\src\components\uploads\FileValidationFeedback.tsx:175:metadata?: Record<string, any>;
D:\Development\github\ReViewPoint\frontend\src\components\uploads\FileValidationFeedback.tsx:394:keyFn: (item: any) => string,
D:\Development\github\ReViewPoint\frontend\src\hooks\uploads\useAdvancedFileUpload.ts:5:info: (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\hooks\uploads\useAdvancedFileUpload.ts:9:warn: (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\hooks\uploads\useAdvancedFileUpload.ts:13:error: (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\hooks\uploads\useAdvancedFileUpload.ts:17:debug: (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\hooks\uploads\useAdvancedFileUpload.ts:36:const uploadFile = async (file: File, _opts?: any) => {
D:\Development\github\ReViewPoint\frontend\src\hooks\useAuth.ts:354:* Check if user has any of the specified roles
D:\Development\github\ReViewPoint\frontend\src\hooks\useCitations.ts:6:filters?: any; // For backward compatibility
D:\Development\github\ReViewPoint\frontend\src\hooks\useCitations.ts:18:updateFilters?: (filters: any) => void; // For backward compatibility
D:\Development\github\ReViewPoint\frontend\src\hooks\useCitations.ts:67:] as any,
D:\Development\github\ReViewPoint\frontend\src\hooks\useCitations.ts:70:] as any,
D:\Development\github\ReViewPoint\frontend\src\hooks\useFileUpload.ts:29:metadata?: Record<string, any>;
D:\Development\github\ReViewPoint\frontend\src\hooks\useFileUpload.ts:56:/** Whether any uploads are in progress */
D:\Development\github\ReViewPoint\frontend\src\hooks\useMarketplace.ts:548:configuration: Record<string, any>,
D:\Development\github\ReViewPoint\frontend\src\lib\api\clients\uploads.ts:46:(import.meta as any).env?.VITE_API_BASE_URL || "http://localhost:8000";
D:\Development\github\ReViewPoint\frontend\src\lib\api\clients\uploads.ts:174:(import.meta as any).env?.VITE_API_BASE_URL || "http://localhost:8000";
D:\Development\github\ReViewPoint\frontend\src\lib\api\clients\uploads.ts:243:(import.meta as any).env?.VITE_API_BASE_URL || "http://localhost:8000";
D:\Development\github\ReViewPoint\frontend\src\lib\api\clients\uploads.ts:294:typeof (data as any).filename === "string" &&
D:\Development\github\ReViewPoint\frontend\src\lib\api\clients\uploads.ts:295:typeof (data as any).url === "string"
D:\Development\github\ReViewPoint\frontend\src\lib\api\clients\uploads.ts:305:Array.isArray((data as any).files) &&
D:\Development\github\ReViewPoint\frontend\src\lib\api\clients\uploads.ts:306:typeof (data as any).total === "number"
D:\Development\github\ReViewPoint\frontend\src\lib\api\clients\uploads.ts:315:Array.isArray((data as any).detail)
D:\Development\github\ReViewPoint\frontend\src\lib\api\generated\client.ts:20:(import.meta as any).env?.VITE_API_BASE_URL || "http://localhost:8000",
D:\Development\github\ReViewPoint\frontend\src\lib\api\generated\client.ts:59:typeof (error as any).message === "string"
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\auth.ts:242:typeof (value as any).access_token === "string" &&
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\auth.ts:243:typeof (value as any).refresh_token === "string" &&
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\auth.ts:244:(value as any).token_type === "bearer"
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\auth.ts:257:Object.values(AuthErrorType).includes((error as any).type)
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\auth.ts:286:// Return null for any decoding errors
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\common.ts:134:typeof (error as any).message === "string"
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\common.ts:148:(response as any).data !== undefined
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\common.ts:163:Array.isArray((response as any).items)
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:331:typeof (value as any).id !== "string" ||
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:332:typeof (value as any).name !== "string" ||
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:333:typeof (value as any).progress !== "number" ||
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:334:typeof (value as any).createdAt !== "string"
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:347:return validStatuses.includes((value as any).status);
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:361:typeof (value as any).id === "number" &&
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:362:typeof (value as any).filename === "string"
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:375:Object.values(UploadErrorType).includes((error as any).type)
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\upload.ts:780:metadata?: Record<string, any>;
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\user.ts:243:typeof (value as any).id === "number" &&
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\user.ts:244:typeof (value as any).email === "string"
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\user.ts:255:(!("theme" in value) || ["dark", "light"].includes((value as any).theme)) &&
D:\Development\github\ReViewPoint\frontend\src\lib\api\types\user.ts:256:(!("locale" in value) || typeof (value as any).locale === "string")
D:\Development\github\ReViewPoint\frontend\src\lib\api\users\core_new.ts:65:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\users\core.ts:188:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\users\exports_new.ts:26:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\users\exports.ts:138:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\base.ts:150:} catch (error: any) {
D:\Development\github\ReViewPoint\frontend\src\lib\api\errorHandling.ts:38:const response = isAxiosError ? (error as any).response : undefined;
D:\Development\github\ReViewPoint\frontend\src\lib\api\errorHandling.ts:89:if ("error" in error && typeof (error as any).error === "string") {
D:\Development\github\ReViewPoint\frontend\src\lib\api\errorHandling.ts:90:const message = (error as any).error;
D:\Development\github\ReViewPoint\frontend\src\lib\api\errorHandling.ts:95:if ("message" in error && typeof (error as any).message === "string") {
D:\Development\github\ReViewPoint\frontend\src\lib\api\errorHandling.ts:96:const message = (error as any).message;
D:\Development\github\ReViewPoint\frontend\src\lib\api\errorHandling.ts:134:// Fallback for any other type
D:\Development\github\ReViewPoint\frontend\src\lib\api\upload.queries.ts:66:mutationFn: async ({ id, data }: { id: string; data: any }) => {
D:\Development\github\ReViewPoint\frontend\src\lib\api\uploads_new.ts:111:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\uploads_new.ts:162:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\uploads.ts:233:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\uploads.ts:287:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\uploads.ts:348:? new URLSearchParams(params as any).toString()
D:\Development\github\ReViewPoint\frontend\src\lib\api\uploads.ts:434:updates: Record<string, any>,
D:\Development\github\ReViewPoint\frontend\src\lib\config\featureFlags.ts:114:if (typeof window !== "undefined" && (window as any).FEATURE_FLAGS) {
D:\Development\github\ReViewPoint\frontend\src\lib\config\featureFlags.ts:115:const windowFlags = (window as any).FEATURE_FLAGS;
D:\Development\github\ReViewPoint\frontend\src\lib\monitoring\errorMonitoring.ts:163:console.error = (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\lib\monitoring\errorMonitoring.ts:178:console.warn = (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\lib\monitoring\errorMonitoring.ts:258:private isSourceMapError(error: any): boolean {
D:\Development\github\ReViewPoint\frontend\src\lib\monitoring\errorMonitoring.ts:401:(window as any).Sentry
D:\Development\github\ReViewPoint\frontend\src\lib\monitoring\errorMonitoring.ts:404:(window as any).Sentry.captureException(
D:\Development\github\ReViewPoint\frontend\src\lib\monitoring\performanceMonitoring.ts:325:if (typeof window !== "undefined" && (window as any).plausible) {
D:\Development\github\ReViewPoint\frontend\src\lib\monitoring\performanceMonitoring.ts:327:(window as any).plausible("Performance Metric", {
D:\Development\github\ReViewPoint\frontend\src\lib\router\ProtectedRoute.tsx:7:/** Required roles (user must have ANY of these roles) */
D:\Development\github\ReViewPoint\frontend\src\lib\router\ProtectedRoute.tsx:9:/** Require ALL specified roles instead of ANY */
D:\Development\github\ReViewPoint\frontend\src\lib\router\ProtectedRoute.tsx:47:// User must have ANY of the specified roles
D:\Development\github\ReViewPoint\frontend\src\lib\router\routes.ts:249:// If route requires roles, check if user has any required role
D:\Development\github\ReViewPoint\frontend\src\lib\store\fileManagementStore.ts:79:details?: any;
D:\Development\github\ReViewPoint\frontend\src\lib\store\fileManagementStore.ts:247:} catch (error: any) {
D:\Development\github\ReViewPoint\frontend\src\lib\store\fileManagementStore.ts:289:} catch (error: any) {
D:\Development\github\ReViewPoint\frontend\src\lib\store\fileManagementStore.ts:315:// Filter out any already selected files to avoid duplicates
D:\Development\github\ReViewPoint\frontend\src\lib\store\fileManagementStore.ts:397:} catch (error: any) {
D:\Development\github\ReViewPoint\frontend\src\lib\store\fileManagementStore.ts:430:} catch (error: any) {
D:\Development\github\ReViewPoint\frontend\src\lib\utils\uploads\uploadQueue.ts:175:type: "UPLOAD_FAILED" as any, // Using any temporarily since UploadErrorType may not have this value
D:\Development\github\ReViewPoint\frontend\src\lib\utils\errorHandling.ts:19:const errorObj = error as Record<string, any>;
D:\Development\github\ReViewPoint\frontend\src\lib\utils\errorHandling.ts:59:// Fallback for any other type
D:\Development\github\ReViewPoint\frontend\src\lib\validation\authSchemas.ts:58:* - At least one letter (any case)
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\config.ts:145:data: z.any().optional().default({}),
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\config.ts:158:data: z.any().optional().default({}),
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\config.ts:172:details?: any;
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\hooks.ts:52:export function useWebSocketEvent<T = any>(
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\hooks.ts:55:dependencies: any[] = [],
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\hooks.ts:216:(data: any) => {
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\hooks.ts:232:(data: any) => {
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\hooks.ts:245:(data: any) => {
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\hooks.ts:282:useCallback((data: any) => {
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\hooks.ts:291:useCallback((data: any) => {
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\webSocketService.ts:36:export type EventListener = (data: any) => void;
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\webSocketService.ts:532:public send(type: WebSocketEventType, data: any = {}): void {
D:\Development\github\ReViewPoint\frontend\src\lib\websocket\webSocketService.ts:744:private emit(event: WebSocketEventType, data: any): void {
D:\Development\github\ReViewPoint\frontend\src\pages\auth\LoginPage.tsx:28:const from = (location.state as any)?.from?.pathname || "/dashboard";
D:\Development\github\ReViewPoint\frontend\src\pages\auth\LoginPage.tsx:250:For testing, you can use any email and password combination.
D:\Development\github\ReViewPoint\frontend\src\pages\marketplace\MarketplacePage.tsx:109:sortBy: sortBy as any,
D:\Development\github\ReViewPoint\frontend\src\pages\marketplace\ModuleDetailPage.tsx:81:const handleSaveConfig = async (config: any) => {
D:\Development\github\ReViewPoint\frontend\src\pages\marketplace\ModuleDetailPage.tsx:700:{} as any,
D:\Development\github\ReViewPoint\frontend\src\pages\marketplace\MyModulesPage.tsx:41:const [selectedModule, setSelectedModule] = useState<any>(null);
D:\Development\github\ReViewPoint\frontend\src\pages\marketplace\MyModulesPage.tsx:43:const openConfigSidebar = (module: any, subscription: any) => {
D:\Development\github\ReViewPoint\frontend\src\pages\marketplace\MyModulesPage.tsx:57:{} as any,
D:\Development\github\ReViewPoint\frontend\src\pages\marketplace\MyModulesPage.tsx:63:const handleSaveConfig = async (config: any) => {
D:\Development\github\ReViewPoint\frontend\src\pages\moderation\ModerationPanelPage.tsx:88:<Badge variant={variant as any} className="flex items-center gap-1">
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:74:issues: any[],
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:99:issues: any[],
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:116:const [selectedModule, setSelectedModule] = useState<any>(null);
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:118:const [moduleResults, setModuleResults] = useState<Record<string, any>>({});
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:277:{} as any,
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:325:const generateModuleResult = (module: any, _reviewDoc: any) => {
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:549:(results as any)[module.id] || {
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:558:const handleSaveModuleConfig = async (config: any) => {
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:583:module.capabilities.supportedFormats.includes(review.fileType as any)
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:941:(claim: any, idx: number) => (
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:1027:setSeverityFilter(e.target.value as any)
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:1155:).map((issue: any, _idx: number) => {
D:\Development\github\ReViewPoint\frontend\src\pages\reviews\ReviewDetailPage.tsx:1380:You don't have any active modules that can process{" "}
D:\Development\github\ReViewPoint\frontend\src\pages\DesignSystemPage.tsx:112:const _handleFormSubmit = (data: any) => {
D:\Development\github\ReViewPoint\frontend\src\pages\FileDashboardTestPage.tsx:21:} catch (error: any) {
D:\Development\github\ReViewPoint\frontend\src\pages\SettingsPage.tsx:86:const updatePrivacySetting = (key: string, value: any) => {
D:\Development\github\ReViewPoint\frontend\src\pages\SettingsPage.tsx:96:const updateAppearanceSetting = (key: string, value: any) => {
D:\Development\github\ReViewPoint\frontend\src\pages\SettingsPage.tsx:106:const updateSecuritySetting = (key: string, value: any) => {
D:\Development\github\ReViewPoint\frontend\src\logger.d.ts:5:error: (...args: any[]) => void;
D:\Development\github\ReViewPoint\frontend\src\logger.d.ts:6:warn: (...args: any[]) => void;
D:\Development\github\ReViewPoint\frontend\src\logger.d.ts:7:info: (...args: any[]) => void;
D:\Development\github\ReViewPoint\frontend\src\logger.d.ts:8:debug: (...args: any[]) => void;
D:\Development\github\ReViewPoint\frontend\src\logger.d.ts:9:trace: (...args: any[]) => void;
D:\Development\github\ReViewPoint\frontend\src\logger.ts:13:if (typeof window !== "undefined" && (window as any).LOG_LEVEL) {
D:\Development\github\ReViewPoint\frontend\src\logger.ts:14:return (window as any).LOG_LEVEL;
D:\Development\github\ReViewPoint\frontend\src\logger.ts:16:if (typeof globalThis !== "undefined" && (globalThis as any).LOG_LEVEL) {
D:\Development\github\ReViewPoint\frontend\src\logger.ts:17:return (globalThis as any).LOG_LEVEL;
D:\Development\github\ReViewPoint\frontend\src\logger.ts:50:error: (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\logger.ts:54:warn: (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\logger.ts:58:info: (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\logger.ts:62:debug: (...args: any[]) => {
D:\Development\github\ReViewPoint\frontend\src\logger.ts:66:trace: (...args: any[]) => {
