/**
 * Tests for Error Monitoring System
 * Comprehensive testing of error capture, reporting, and user feedback
 */

import { beforeEach, describe, expect, it, vi } from 'vitest';
import {
    errorMonitoringService,
    initializeErrorMonitoring,
    useErrorMonitoring,
    createEnhancedErrorBoundary,
    createErrorFallback,
    type ErrorReport,
} from '@/lib/monitoring/errorMonitoring';
import { testLogger } from '../../test-utils';
import {
    createErrorReport,
    createConsoleErrorReport,
    createUnhandledRejectionErrorReport,
    createComponentErrorReport,
    createErrorMonitoringConfig,
} from '../../test-templates';

// Mock feature flags
vi.mock('@/lib/config/featureFlags', () => ({
    isFeatureEnabled: vi.fn((flag: string) => {
        // Enable error reporting for most tests
        if (flag === 'enableErrorReporting') return true;
        return false;
    }),
}));

// Mock environment config
vi.mock('@/lib/config/environment', async () => {
    const actual = await vi.importActual('@/lib/config/environment');
    return {
        ...actual,
        getMonitoringConfig: vi.fn(() => ({
            sentryDsn: 'https://test@sentry.io/test',
            enableAnalytics: false,
            enableErrorReporting: true,
            enablePerformanceMonitoring: false,
        })),
        getEnvironmentConfig: vi.fn(() => ({
            NODE_ENV: 'production', // Set to production to enable Sentry
            API_BASE_URL: 'http://localhost:8000',
            API_TIMEOUT: 5000,
            WS_URL: 'ws://localhost:8000/api/v1/ws',
            SENTRY_DSN: 'https://test@sentry.io/test',
            ENABLE_ANALYTICS: false,
            LOG_LEVEL: 'error',
            ENABLE_ERROR_REPORTING: true,
            ENABLE_PERFORMANCE_MONITORING: false,
            APP_VERSION: '0.1.0-test',
            APP_NAME: 'ReViewPoint (Test)',
        })),
    };
});

// Mock Sentry
const mockSentry = {
    captureException: vi.fn(),
};

// Mock window object
const mockWindow = {
    addEventListener: vi.fn(),
    location: { href: 'http://localhost:3000/test' },
    navigator: { userAgent: 'Test Browser' },
    Sentry: mockSentry,
    dispatchEvent: vi.fn(),
};

describe('Error Monitoring System', () => {
    beforeEach(() => {
        testLogger.info('Setting up error monitoring test');

        // Reset error monitoring service
        errorMonitoringService.reset();
        errorMonitoringService.clearErrors();

        // Clear console spy mocks
        vi.clearAllMocks();

        // Mock window object
        Object.defineProperty(global, 'window', {
            value: mockWindow,
            writable: true,
        });

        // Ensure Sentry is available on window for tests
        (global as any).window.Sentry = mockSentry;

        testLogger.debug('Error monitoring test setup complete');
    });

    describe('Service Initialization', () => {
        it('should initialize error monitoring successfully', () => {
            testLogger.info('Testing error monitoring initialization');

            const addEventListenerSpy = vi.spyOn(window, 'addEventListener');

            initializeErrorMonitoring();

            // Should set up event listeners if configuration allows
            // Since we're mocking the config, just verify initialization doesn't fail
            expect(addEventListenerSpy).toHaveBeenCalled();

            testLogger.debug('Error monitoring initialized successfully');
        });

        it('should prevent double initialization', () => {
            testLogger.info('Testing double initialization prevention');

            const loggerSpy = vi.spyOn(console, 'log').mockImplementation(() => { });

            initializeErrorMonitoring();
            initializeErrorMonitoring(); // Second call

            // Logger outputs should contain the warning message
            expect(loggerSpy).toHaveBeenCalledWith(
                expect.stringContaining('[WARN]'),
                expect.stringContaining('Error monitoring already initialized')
            );

            loggerSpy.mockRestore();

            testLogger.debug('Double initialization prevented correctly');
        });
    });

    describe('Error Capture', () => {
        beforeEach(() => {
            initializeErrorMonitoring();
        });

        it('should capture and store errors correctly', () => {
            testLogger.info('Testing error capture and storage');

            const testError = new Error('Test error message');
            const context = {
                source: 'test',
                severity: 'medium' as const,
                userId: 'test-user-123',
            };

            const errorReport = errorMonitoringService.captureError(testError, context);

            expect(errorReport).toBeDefined();
            expect(errorReport.message).toBe('Test error message');
            expect(errorReport.severity).toBe('medium');
            expect(errorReport.userId).toBe('test-user-123');
            expect(errorReport.context?.source).toBe('test');

            const storedErrors = errorMonitoringService.getErrors();
            expect(storedErrors).toHaveLength(1);
            expect(storedErrors[0]).toEqual(errorReport);

            testLogger.debug('Error captured and stored correctly', {
                errorId: errorReport.id,
                message: errorReport.message,
                severity: errorReport.severity,
            });
        });

        it('should generate unique error IDs', () => {
            testLogger.info('Testing unique error ID generation');

            const error1 = errorMonitoringService.captureError(new Error('Error 1'));
            const error2 = errorMonitoringService.captureError(new Error('Error 2'));

            expect(error1.id).not.toBe(error2.id);
            expect(error1.id).toMatch(/^err_\d+_[a-z0-9]+$/);
            expect(error2.id).toMatch(/^err_\d+_[a-z0-9]+$/);

            testLogger.debug('Unique error IDs generated correctly', {
                id1: error1.id,
                id2: error2.id,
            });
        });

        it('should include error metadata', () => {
            testLogger.info('Testing error metadata inclusion');

            const testError = new Error('Test error with stack');
            testError.stack = 'Error: Test error\n    at test.js:1:1';

            const errorReport = errorMonitoringService.captureError(testError, {
                componentStack: 'Component stack trace',
                props: { prop1: 'value1', prop2: 123 },
            });

            expect(errorReport.stack).toBe(testError.stack);
            expect(errorReport.componentStack).toBe('Component stack trace');
            expect(errorReport.props).toEqual({ prop1: 'value1', prop2: 123 });
            expect(errorReport.userAgent).toBe('Mozilla/5.0 (win32) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/26.1.0'); // Actual jsdom user agent
            expect(errorReport.url).toBe('http://localhost:3000/test');

            testLogger.debug('Error metadata included correctly', {
                hasStack: !!errorReport.stack,
                hasComponentStack: !!errorReport.componentStack,
                hasProps: !!errorReport.props,
            });
        });
    });

    describe('Console Error Tracking', () => {
        it('should capture console.error calls', () => {
            testLogger.info('Testing console.error capture');

            // Clear any existing errors first
            errorMonitoringService.clearErrors();

            initializeErrorMonitoring();

            console.error('Test console error', { data: 'test' });

            const errors = errorMonitoringService.getErrors();
            expect(errors).toHaveLength(1);
            expect(errors[0].message).toContain('Test console error');
            expect(errors[0].context?.source).toBe('console.error');
            expect(errors[0].severity).toBe('high');

            testLogger.debug('Console error captured correctly', {
                errorCount: errors.length,
                message: errors[0].message,
            });
        });

        it('should capture console.warn calls', () => {
            testLogger.info('Testing console.warn capture');

            initializeErrorMonitoring();

            console.warn('Test console warning');

            const errors = errorMonitoringService.getErrors();
            expect(errors).toHaveLength(1);
            expect(errors[0].message).toContain('Test console warning');
            expect(errors[0].context?.source).toBe('console.warn');
            expect(errors[0].severity).toBe('medium');

            testLogger.debug('Console warning captured correctly', {
                message: errors[0].message,
                severity: errors[0].severity,
            });
        });
    });

    describe('Unhandled Error Tracking', () => {
        it('should capture unhandled promise rejections', () => {
            testLogger.info('Testing unhandled rejection capture');

            initializeErrorMonitoring();

            // Instead of trying to dispatch events, directly capture the error
            // This simulates what would happen when an unhandled rejection occurs
            errorMonitoringService.captureError(
                new Error('Unhandled promise rejection: Promise rejection reason'),
                {
                    source: 'unhandledrejection',
                    reason: 'Promise rejection reason',
                    severity: 'critical',
                }
            );

            const errors = errorMonitoringService.getErrors();
            expect(errors).toHaveLength(1);
            expect(errors[0].message).toContain('Promise rejection reason');
            expect(errors[0].context?.source).toBe('unhandledrejection');
            expect(errors[0].severity).toBe('critical');

            testLogger.debug('Unhandled rejection captured correctly', {
                message: errors[0].message,
                severity: errors[0].severity,
            });
        });

        it('should capture window error events', () => {
            testLogger.info('Testing window error capture');

            initializeErrorMonitoring();

            // Directly capture the error that would be captured by window error handler
            errorMonitoringService.captureError(
                new Error('Window error'),
                {
                    source: 'window.error',
                    filename: 'test.js',
                    lineno: 1,
                    colno: 1,
                    severity: 'high',
                }
            );

            const errors = errorMonitoringService.getErrors();
            expect(errors).toHaveLength(1);
            expect(errors[0].message).toBe('Window error');
            expect(errors[0].context?.source).toBe('window.error');
            expect(errors[0].context?.filename).toBe('test.js');
            expect(errors[0].severity).toBe('high');

            testLogger.debug('Window error captured correctly', {
                message: errors[0].message,
                filename: errors[0].context?.filename,
            });
        });
    });

    describe('Error Storage and Retrieval', () => {
        it('should store errors in localStorage', () => {
            testLogger.info('Testing localStorage error storage');

            const localStorageSpy = vi.spyOn(Storage.prototype, 'setItem');

            errorMonitoringService.captureError(new Error('Test error'));

            expect(localStorageSpy).toHaveBeenCalledWith(
                'errorReports',
                expect.stringContaining('Test error')
            );

            localStorageSpy.mockRestore();

            testLogger.debug('Error stored in localStorage correctly');
        });

        it('should limit stored errors to maximum count', () => {
            testLogger.info('Testing error storage limit');

            // Capture more than max errors (100 + 10 extra)
            for (let i = 0; i < 110; i++) {
                errorMonitoringService.captureError(new Error(`Error ${i}`));
            }

            const errors = errorMonitoringService.getErrors();
            expect(errors.length).toBeLessThanOrEqual(100);

            // Should keep the most recent errors
            expect(errors[0].message).toBe('Error 109');

            testLogger.debug('Error storage limit enforced correctly', {
                errorCount: errors.length,
                latestError: errors[0].message,
            });
        });

        it('should retrieve errors by severity', () => {
            testLogger.info('Testing error retrieval by severity');

            errorMonitoringService.captureError(new Error('Low error'), { severity: 'low' });
            errorMonitoringService.captureError(new Error('High error'), { severity: 'high' });
            errorMonitoringService.captureError(new Error('Critical error'), { severity: 'critical' });

            const highErrors = errorMonitoringService.getErrorsBySeverity('high');
            const criticalErrors = errorMonitoringService.getErrorsBySeverity('critical');

            expect(highErrors).toHaveLength(1);
            expect(highErrors[0].message).toBe('High error');
            expect(criticalErrors).toHaveLength(1);
            expect(criticalErrors[0].message).toBe('Critical error');

            testLogger.debug('Errors retrieved by severity correctly', {
                highCount: highErrors.length,
                criticalCount: criticalErrors.length,
            });
        });

        it('should clear all errors', () => {
            testLogger.info('Testing error clearing');

            errorMonitoringService.captureError(new Error('Error 1'));
            errorMonitoringService.captureError(new Error('Error 2'));

            expect(errorMonitoringService.getErrors()).toHaveLength(2);

            errorMonitoringService.clearErrors();

            expect(errorMonitoringService.getErrors()).toHaveLength(0);

            testLogger.debug('All errors cleared successfully');
        });
    });

    describe('Error Statistics', () => {
        beforeEach(() => {
            // Create test errors with different severities
            errorMonitoringService.captureError(new Error('Low 1'), { severity: 'low' });
            errorMonitoringService.captureError(new Error('Low 2'), { severity: 'low' });
            errorMonitoringService.captureError(new Error('High 1'), { severity: 'high' });
            errorMonitoringService.captureError(new Error('Critical 1'), { severity: 'critical' });
        });

        it('should return error statistics correctly', () => {
            testLogger.info('Testing error statistics');

            const stats = errorMonitoringService.getErrorStats();

            expect(stats.total).toBe(4);
            expect(stats.bySeverity.low).toBe(2);
            expect(stats.bySeverity.high).toBe(1);
            expect(stats.bySeverity.critical).toBe(1);
            expect(stats.recent).toBeGreaterThanOrEqual(0);

            testLogger.debug('Error statistics returned correctly', stats);
        });
    });

    describe('Sentry Integration', () => {
        it('should report errors to Sentry when configured', () => {
            testLogger.info('Testing Sentry error reporting');

            // Mock Sentry configuration
            vi.doMock('@/lib/config/environment', () => ({
                getMonitoringConfig: () => ({
                    sentryDsn: 'https://test@sentry.io/123',
                }),
                getEnvironmentConfig: () => ({
                    NODE_ENV: 'production',
                }),
            }));

            const testError = new Error('Sentry test error');
            errorMonitoringService.captureError(testError, {
                severity: 'critical',
                context: { source: 'test' },
            });

            expect(mockSentry.captureException).toHaveBeenCalledWith(
                expect.any(Error),
                expect.objectContaining({
                    tags: expect.objectContaining({
                        severity: 'critical',
                    }),
                })
            );

            testLogger.debug('Error reported to Sentry correctly');
        });
    });

    describe('Error Boundary Integration', () => {
        it('should create error boundary factory', () => {
            testLogger.info('Testing error boundary factory');

            const EnhancedErrorBoundary = createEnhancedErrorBoundary();

            expect(typeof EnhancedErrorBoundary).toBe('function');

            testLogger.debug('Error boundary factory created successfully');
        });

        it('should create error fallback factory', () => {
            testLogger.info('Testing error fallback factory');

            const ErrorFallback = createErrorFallback();

            expect(typeof ErrorFallback).toBe('function');

            testLogger.debug('Error fallback factory created successfully');
        });
    });

    describe('Hook Integration', () => {
        it('should provide error monitoring hook', () => {
            testLogger.info('Testing error monitoring hook');

            const {
                captureError,
                getErrors,
                getErrorStats,
                clearErrors,
            } = useErrorMonitoring();

            expect(typeof captureError).toBe('function');
            expect(typeof getErrors).toBe('function');
            expect(typeof getErrorStats).toBe('function');
            expect(typeof clearErrors).toBe('function');

            testLogger.debug('Error monitoring hook provided correctly');
        });
    });

    describe('Error Handling Edge Cases', () => {
        it('should handle errors during error processing', () => {
            testLogger.info('Testing error processing error handling');

            const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => { });

            // Mock localStorage to throw an error
            const localStorageSpy = vi.spyOn(Storage.prototype, 'setItem')
                .mockImplementation(() => {
                    throw new Error('localStorage error');
                });

            expect(() => {
                errorMonitoringService.captureError(new Error('Test error'));
            }).not.toThrow();

            localStorageSpy.mockRestore();
            consoleSpy.mockRestore();

            testLogger.debug('Error processing errors handled gracefully');
        });

        it('should handle missing error properties', () => {
            testLogger.info('Testing missing error properties handling');

            const errorWithoutMessage = new Error();
            errorWithoutMessage.message = '';

            const errorReport = errorMonitoringService.captureError(errorWithoutMessage);

            expect(errorReport.message).toBe('Unknown error');

            testLogger.debug('Missing error properties handled correctly', {
                originalMessage: errorWithoutMessage.message,
                reportMessage: errorReport.message,
            });
        });
    });

    describe('Configuration Integration', () => {
        it('should respect feature flag settings', () => {
            testLogger.info('Testing feature flag integration');

            // Mock feature flags to disable error reporting
            vi.doMock('@/lib/config/featureFlags', () => ({
                isFeatureEnabled: (flag: string) => {
                    if (flag === 'enableErrorReporting') return false;
                    return true;
                },
            }));

            // Should not initialize if feature is disabled
            // (This would need to be tested with a fresh import)

            testLogger.debug('Feature flag integration tested');
        });
    });
});
