# ============================================================================
# ReViewPoint Frontend Environment Configuration Template (Detailed)
# ============================================================================
# This template provides comprehensive documentation for all environment
# variables used in the ReViewPoint frontend application.
#
# USAGE INSTRUCTIONS:
# 1. Copy this file to .env.local for local development
# 2. Copy to .env.[environment] for specific environments
# 3. Uncomment and modify variables as needed
# 4. Never commit .env.local or files with secrets to version control
#
# VARIABLE NAMING CONVENTION:
# - All client-exposed variables must start with VITE_
# - Use SCREAMING_SNAKE_CASE for variable names
# - Group related variables with prefixes (e.g., VITE_API_, VITE_FEATURE_)
# ============================================================================

# ============================================================================
# CORE ENVIRONMENT SETTINGS
# ============================================================================

# NODE_ENV - Runtime Environment
# 🔧 Controls build optimizations and default configurations
# 📋 Valid values: development | staging | production | test
# 🌟 Default: development
# 
# Effects:
# - development: Enables dev tools, verbose logging, hot reload
# - production: Enables optimizations, minification, error reporting
# - staging: Production-like with additional debugging
# - test: Minimal logging, faster timeouts, mock services
# 
# Examples:
# NODE_ENV=development  # Local development
# NODE_ENV=staging      # Staging server
# NODE_ENV=production   # Live production
# NODE_ENV=test        # Automated testing
NODE_ENV=development

# ============================================================================
# API & BACKEND CONNECTIVITY
# ============================================================================

# VITE_API_BASE_URL - Backend API Endpoint
# 🔧 Base URL for all backend API requests
# 📋 Format: http[s]://[subdomain.]domain.com[:port][/path]
# 🌟 Default: Uses Vite proxy when undefined in development
#
# Environment Examples:
# Development (local):     http://localhost:8000
# Development (Docker):    http://host.docker.internal:8000
# Development (network):   http://192.168.1.100:8000
# Staging:                 https://api-staging.reviewpoint.com
# Production:              https://api.reviewpoint.com
# Testing:                 http://localhost:8000 (with mocks)
#
# Security Notes:
# - Always use HTTPS in production
# - Ensure CORS is configured on the backend
# - Consider using environment-specific subdomains
#
# Performance Notes:
# - Use CDN-backed URLs for better global performance
# - Consider geographic API endpoints for international users
#
# VITE_API_BASE_URL=http://localhost:8000

# VITE_API_TIMEOUT - Request Timeout (milliseconds)
# 🔧 Maximum time to wait for API responses
# 📋 Valid range: 1000-60000 (1-60 seconds)
# 🌟 Default: 10000 (10 seconds)
#
# Recommended Values:
# - Development: 10000-15000 (slower for debugging)
# - Production: 20000-30000 (account for network latency)
# - Testing: 5000 (fast test execution)
# - Mobile/slow networks: 30000-45000
#
# Considerations:
# - File uploads may need longer timeouts
# - Real-time features should use WebSocket instead
# - Consider implementing retry logic for failed requests
#
VITE_API_TIMEOUT=10000

# VITE_WS_URL - WebSocket Endpoint
# 🔧 Real-time communication endpoint
# 📋 Format: ws[s]://[subdomain.]domain.com[:port]/path
# 🌟 Default: ws://localhost:8000/api/v1
#
# Environment Examples:
# Development:  ws://localhost:8000/api/v1
# Staging:      wss://api-staging.reviewpoint.com/api/v1
# Production:   wss://api.reviewpoint.com/api/v1
#
# Features Using WebSocket:
# - Real-time collaboration
# - Live notifications
# - Upload progress updates
# - Multi-user document editing
# - Live chat/comments
#
# Security Notes:
# - Always use WSS (secure WebSocket) in production
# - Implement proper authentication for WebSocket connections
# - Consider rate limiting and connection limits
#
VITE_WS_URL=ws://localhost:8000/api/v1

# ============================================================================
# MONITORING & OBSERVABILITY
# ============================================================================

# VITE_SENTRY_DSN - Error Tracking Service
# 🔧 Sentry Data Source Name for error reporting
# 📋 Format: https://[key]@[org].ingest.sentry.io/[project]
# 🌟 Default: Empty (disabled)
#
# Setup Instructions:
# 1. Create account at https://sentry.io
# 2. Create new project for ReViewPoint Frontend
# 3. Copy DSN from project settings
# 4. Configure release tracking for better debugging
#
# Example DSN:
# VITE_SENTRY_DSN=https://abc123def456@o123456.ingest.sentry.io/789012
#
# Benefits:
# - Real-time error notifications
# - Stack trace analysis
# - Performance monitoring
# - Release tracking
# - User impact analysis
#
# Privacy Considerations:
# - Configure data scrubbing for sensitive information
# - Set up proper user consent mechanisms
# - Review data retention policies
#
# VITE_SENTRY_DSN=

# VITE_ENABLE_ANALYTICS - Usage Analytics
# 🔧 Enable collection of user behavior data
# 📋 Valid values: true | false
# 🌟 Default: false (development), true (production)
#
# Analytics Providers:
# - Google Analytics 4
# - Mixpanel
# - Amplitude
# - Adobe Analytics
# - Custom analytics service
#
# Tracked Events:
# - Page views and navigation
# - User interactions (clicks, form submissions)
# - Feature usage patterns
# - Performance metrics
# - Error occurrences
#
# GDPR/Privacy Compliance:
# - Implement proper consent mechanisms
# - Provide opt-out options
# - Anonymize sensitive data
# - Respect Do Not Track headers
#
VITE_ENABLE_ANALYTICS=false

# VITE_LOG_LEVEL - Console Logging Level
# 🔧 Controls verbosity of console output
# 📋 Valid values: error | warn | info | debug | trace
# 🌟 Default: debug (development), warn (production), error (test)
#
# Level Descriptions:
# - error: Only critical errors and exceptions
# - warn: Warnings and errors (recommended for production)
# - info: General information, warnings, and errors
# - debug: Detailed debugging info (recommended for development)
# - trace: Very verbose, includes function call traces
#
# Performance Impact:
# - Higher log levels can impact performance
# - Consider using debug/trace only in development
# - Use structured logging for better analysis
#
VITE_LOG_LEVEL=debug

# VITE_ENABLE_ERROR_REPORTING - Automatic Error Reporting
# 🔧 Automatically report JavaScript errors to monitoring services
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Error Types Reported:
# - Unhandled JavaScript exceptions
# - Promise rejections
# - React component errors
# - Network request failures
# - Performance issues
#
# Configuration Options:
# - Filter sensitive errors
# - Add custom context data
# - Set user identification
# - Configure sampling rates
#
VITE_ENABLE_ERROR_REPORTING=true

# VITE_ENABLE_PERFORMANCE_MONITORING - Performance Tracking
# 🔧 Monitor application performance metrics
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Metrics Tracked:
# - Core Web Vitals (LCP, FID, CLS)
# - Bundle size and load times
# - API response times
# - Render performance
# - Memory usage
#
# Benefits:
# - Identify performance bottlenecks
# - Track performance over time
# - Monitor real user experience
# - Optimize based on data
#
VITE_ENABLE_PERFORMANCE_MONITORING=true

# ============================================================================
# APPLICATION IDENTITY
# ============================================================================

# VITE_APP_VERSION - Application Version
# 🔧 Semantic version number for release tracking
# 📋 Format: MAJOR.MINOR.PATCH[-prerelease][+build]
# 🌟 Default: 0.1.0
#
# Versioning Strategy:
# - MAJOR: Breaking changes or major feature releases
# - MINOR: New features, backward compatible
# - PATCH: Bug fixes, security patches
# - Pre-release: alpha, beta, rc (release candidate)
#
# Examples:
# - 1.0.0 (first production release)
# - 1.2.3 (feature update with patches)
# - 2.0.0-beta.1 (major update in beta)
# - 1.1.1+20231201 (patch with build metadata)
#
# Integration:
# - Display in footer or about page
# - Include in error reports
# - Use for cache busting
# - Track in analytics
#
VITE_APP_VERSION=0.1.0

# VITE_APP_NAME - Application Display Name
# 🔧 Human-readable application name shown in UI
# 📋 Format: String (avoid special characters in URLs)
# 🌟 Default: ReViewPoint
#
# Environment-Specific Names:
# - Production: "ReViewPoint"
# - Staging: "ReViewPoint (Staging)"
# - Development: "ReViewPoint (Dev)"
# - Testing: "ReViewPoint (Test)"
# - Feature Branch: "ReViewPoint (Feature-X)"
#
# Usage:
# - Browser tab title
# - Application header
# - Email notifications
# - Error reports
# - Analytics tracking
#
VITE_APP_NAME=ReViewPoint

# ============================================================================
# DEVELOPMENT TOOLS
# ============================================================================

# VITE_REACT_DEVTOOLS - React Developer Tools Integration
# 🔧 Enable React DevTools browser extension features
# 📋 Valid values: true | false
# 🌟 Default: true (development only)
#
# Features Enabled:
# - Component tree inspection
# - Props and state debugging
# - Performance profiling
# - Hook debugging
# - Time travel debugging
#
# Note: Only affects development builds
# Production builds ignore this setting for security
#
VITE_REACT_DEVTOOLS=true

# VITE_IGNORE_SOURCEMAP_ERRORS - Sourcemap Error Suppression
# 🔧 Suppress sourcemap-related console warnings
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Common Sourcemap Issues:
# - Third-party libraries without sourcemaps
# - CDN-loaded scripts
# - Minified dependencies
# - Browser extension interference
#
# When to Enable:
# - Clean development console output
# - Third-party library sourcemap issues
# - CI/CD environments
#
VITE_IGNORE_SOURCEMAP_ERRORS=true

# ============================================================================
# FEATURE FLAGS - AUTHENTICATION
# ============================================================================

# VITE_FEATURE_ENABLE_PASSWORD_RESET - Password Reset Functionality
# 🔧 Allow users to reset passwords via email
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Requirements:
# - Email service configuration (SMTP/SendGrid/etc.)
# - Secure token generation and validation
# - Rate limiting for reset requests
# - Email template customization
#
# Security Considerations:
# - Token expiration (recommended: 1-6 hours)
# - Single-use tokens
# - Account lockout after multiple attempts
# - Notification to user's current email
#
VITE_FEATURE_ENABLE_PASSWORD_RESET=true

# VITE_FEATURE_ENABLE_SOCIAL_LOGIN - OAuth Social Authentication
# 🔧 Enable login via third-party OAuth providers
# 📋 Valid values: true | false
# 🌟 Default: false
#
# Supported Providers:
# - Google (OAuth 2.0)
# - GitHub (OAuth 2.0)
# - Microsoft (OAuth 2.0/OpenID Connect)
# - Facebook (OAuth 2.0)
# - LinkedIn (OAuth 2.0)
# - Custom OIDC providers
#
# Backend Requirements:
# - OAuth client credentials for each provider
# - Redirect URI configuration
# - User account linking/creation logic
# - Token refresh mechanisms
#
VITE_FEATURE_ENABLE_SOCIAL_LOGIN=false

# VITE_FEATURE_ENABLE_TWO_FACTOR_AUTH - Two-Factor Authentication
# 🔧 Enable TOTP-based 2FA for enhanced security
# 📋 Valid values: true | false
# 🌟 Default: false
#
# Implementation Options:
# - TOTP (Time-based One-Time Password) - Google Authenticator, Authy
# - SMS-based codes (requires SMS service)
# - Email-based codes
# - Hardware tokens (FIDO2/WebAuthn)
# - Backup codes for recovery
#
# Security Benefits:
# - Protection against credential theft
# - Compliance with security standards
# - Enhanced user trust
# - Reduced account compromise risk
#
VITE_FEATURE_ENABLE_TWO_FACTOR_AUTH=false

# ============================================================================
# FEATURE FLAGS - FILE UPLOAD
# ============================================================================

# VITE_FEATURE_ENABLE_MULTIPLE_FILE_UPLOAD - Multi-File Upload
# 🔧 Allow uploading multiple files simultaneously
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Features:
# - Batch file selection
# - Parallel upload processing
# - Individual file progress tracking
# - Selective file removal before upload
# - Drag-and-drop multiple files
#
# Performance Considerations:
# - Concurrent upload limits
# - Bandwidth throttling
# - Memory usage for large files
# - Server-side processing capacity
#
VITE_FEATURE_ENABLE_MULTIPLE_FILE_UPLOAD=true

# VITE_FEATURE_ENABLE_DRAG_DROP_UPLOAD - Drag & Drop Interface
# 🔧 Enable drag-and-drop file upload functionality
# 📋 Valid values: true | false
# 🌟 Default: true
#
# User Experience:
# - Visual drop zones
# - Drag hover effects
# - File type validation on drop
# - Folder drag support (where supported)
# - Integration with file browser fallback
#
# Browser Compatibility:
# - Modern browsers: Full support
# - Older browsers: Graceful fallback to file input
# - Mobile devices: Limited support
#
VITE_FEATURE_ENABLE_DRAG_DROP_UPLOAD=true

# VITE_FEATURE_ENABLE_UPLOAD_PROGRESS - Upload Progress Display
# 🔧 Show real-time upload progress indicators
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Progress Information:
# - Individual file progress
# - Overall batch progress
# - Upload speed
# - Time remaining estimate
# - Pause/resume functionality
#
# Implementation:
# - XMLHttpRequest progress events
# - WebSocket progress updates
# - Chunked upload progress
# - Error state handling
#
VITE_FEATURE_ENABLE_UPLOAD_PROGRESS=true

# VITE_FEATURE_ENABLE_FILE_PREVIEW - File Preview Functionality
# 🔧 Display file previews before and after upload
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Supported File Types:
# - Images: JPEG, PNG, GIF, WebP, SVG
# - Documents: PDF (via PDF.js)
# - Text: TXT, MD, JSON, CSV
# - Code: JS, TS, HTML, CSS, etc.
# - Video: MP4, WebM (with controls)
# - Audio: MP3, WAV, OGG
#
# Security Considerations:
# - Client-side file type validation
# - File size limits for preview generation
# - Sandbox iframe for untrusted content
# - XSS prevention for text files
#
VITE_FEATURE_ENABLE_FILE_PREVIEW=true

# ============================================================================
# FEATURE FLAGS - REVIEW & COLLABORATION
# ============================================================================

# VITE_FEATURE_ENABLE_AI_REVIEWS - AI-Powered Document Analysis
# 🔧 Enable AI-assisted document review and insights
# 📋 Valid values: true | false
# 🌟 Default: false
#
# AI Capabilities:
# - Document content analysis
# - Automated quality scoring
# - Suggestion generation
# - Content categorization
# - Anomaly detection
# - Language and sentiment analysis
#
# Backend Requirements:
# - AI/ML service integration (OpenAI, Azure Cognitive, etc.)
# - Document processing pipeline
# - API key management
# - Rate limiting and cost control
# - Model version management
#
VITE_FEATURE_ENABLE_AI_REVIEWS=false

# VITE_FEATURE_ENABLE_COLLABORATIVE_REVIEWS - Multi-User Collaboration
# 🔧 Enable real-time collaborative document review
# 📋 Valid values: true | false
# 🌟 Default: false
#
# Collaboration Features:
# - Real-time cursor tracking
# - Live comment threads
# - User presence indicators
# - Conflict resolution
# - Version control integration
# - Role-based permissions
#
# Technical Requirements:
# - WebSocket for real-time updates
# - Operational transformation for concurrent edits
# - User session management
# - Conflict resolution algorithms
# - Persistent connection handling
#
VITE_FEATURE_ENABLE_COLLABORATIVE_REVIEWS=false

# VITE_FEATURE_ENABLE_REVIEW_COMMENTS - Comment System
# 🔧 Enable commenting on documents and reviews
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Comment Features:
# - Thread-based discussions
# - Reply functionality
# - Comment anchoring to document sections
# - Rich text formatting
# - Mention system (@username)
# - Comment resolution/status tracking
#
# Moderation Features:
# - Comment editing/deletion
# - Admin moderation tools
# - Spam detection
# - Content filtering
# - User blocking/reporting
#
VITE_FEATURE_ENABLE_REVIEW_COMMENTS=true

# VITE_FEATURE_ENABLE_REVIEW_EXPORT - Export Functionality
# 🔧 Allow exporting review results and reports
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Export Formats:
# - PDF reports with comments and annotations
# - Word documents with tracked changes
# - Excel spreadsheets with review data
# - JSON/CSV for data analysis
# - HTML for web sharing
#
# Export Options:
# - Include/exclude specific review sections
# - Custom branding and formatting
# - Password protection for sensitive reviews
# - Watermarking for document security
# - Batch export for multiple reviews
#
VITE_FEATURE_ENABLE_REVIEW_EXPORT=true

# ============================================================================
# FEATURE FLAGS - USER INTERFACE
# ============================================================================

# VITE_FEATURE_ENABLE_DARK_MODE - Theme Switching
# 🔧 Enable light/dark theme support
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Theme Features:
# - System preference detection
# - Manual theme switching
# - Smooth theme transitions
# - Persistent theme selection
# - Theme-aware component styling
# - High contrast mode support
#
# Implementation:
# - CSS custom properties for theme colors
# - Tailwind CSS dark mode utilities
# - LocalStorage for persistence
# - System media query detection
# - Prefers-color-scheme respect
#
VITE_FEATURE_ENABLE_DARK_MODE=true

# VITE_FEATURE_ENABLE_NOTIFICATIONS - Push Notifications
# 🔧 Enable browser push notifications
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Notification Types:
# - Review completion alerts
# - Comment mentions
# - System maintenance notices
# - Security alerts
# - Collaboration invitations
# - Upload completion status
#
# Requirements:
# - User permission request
# - Service Worker registration
# - Push service configuration (FCM, etc.)
# - Notification scheduling
# - Click action handling
#
VITE_FEATURE_ENABLE_NOTIFICATIONS=true

# VITE_FEATURE_ENABLE_BREADCRUMBS - Navigation Breadcrumbs
# 🔧 Show hierarchical navigation breadcrumbs
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Breadcrumb Features:
# - Automatic route-based generation
# - Custom breadcrumb labels
# - Click navigation to parent routes
# - Mobile-responsive display
# - SEO-friendly structured data
# - Accessibility support (ARIA)
#
# Use Cases:
# - Deep navigation in file structures
# - Multi-step wizards and forms
# - Hierarchical data exploration
# - User orientation in complex UIs
#
VITE_FEATURE_ENABLE_BREADCRUMBS=true

# VITE_FEATURE_ENABLE_SIDEBAR - Collapsible Sidebar
# 🔧 Enable collapsible sidebar navigation
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Sidebar Features:
# - Collapsible/expandable functionality
# - Responsive behavior (auto-hide on mobile)
# - Persistent state (remember collapsed/expanded)
# - Keyboard navigation support
# - Custom sidebar content areas
# - Overlay mode for narrow screens
#
# Layout Benefits:
# - More content area when collapsed
# - Quick access to navigation when expanded
# - Better mobile experience
# - Customizable workspace layout
#
VITE_FEATURE_ENABLE_SIDEBAR=true

# VITE_FEATURE_ENABLE_WEBSOCKET - Real-Time Features
# 🔧 Enable WebSocket-based real-time functionality
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Real-Time Features:
# - Live notifications
# - Collaborative editing
# - User presence indicators
# - Chat/messaging
# - Live data updates
# - System status updates
#
# WebSocket Management:
# - Automatic reconnection
# - Connection state monitoring
# - Message queuing during disconnection
# - Heartbeat/keepalive mechanism
# - Error handling and fallbacks
#
VITE_FEATURE_ENABLE_WEBSOCKET=true

# ============================================================================
# FEATURE FLAGS - PERFORMANCE
# ============================================================================

# VITE_FEATURE_ENABLE_VIRTUALIZATION - Virtual Scrolling
# 🔧 Use virtual scrolling for large lists and tables
# 📋 Valid values: true | false
# 🌟 Default: false
#
# Benefits:
# - Handle thousands of items efficiently
# - Constant memory usage regardless of list size
# - Smooth scrolling performance
# - Reduced DOM manipulation
# - Better mobile performance
#
# Use Cases:
# - Large file lists
# - Extensive review histories
# - User directories
# - Data tables with many rows
# - Search results
#
# Implementation:
# - React Virtualized or React Window
# - Fixed or dynamic item heights
# - Horizontal and vertical virtualization
# - Infinite scrolling integration
#
VITE_FEATURE_ENABLE_VIRTUALIZATION=false

# VITE_FEATURE_ENABLE_LAZY_LOADING - Component Lazy Loading
# 🔧 Load components and resources only when needed
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Lazy Loading Types:
# - Route-based code splitting
# - Component-level lazy loading
# - Image lazy loading
# - Module dynamic imports
# - Third-party library lazy loading
#
# Performance Benefits:
# - Faster initial page load
# - Reduced bundle size
# - Better Core Web Vitals scores
# - Improved mobile experience
# - Bandwidth conservation
#
VITE_FEATURE_ENABLE_LAZY_LOADING=true

# VITE_FEATURE_ENABLE_CODE_SPLITTING - Bundle Code Splitting
# 🔧 Split JavaScript bundles for optimal loading
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Splitting Strategies:
# - Route-based splitting (page-level chunks)
# - Feature-based splitting (functionality chunks)
# - Vendor splitting (third-party libraries)
# - Dynamic imports for on-demand loading
# - Common chunk extraction
#
# Benefits:
# - Parallel download of resources
# - Better caching strategies
# - Reduced initial bundle size
# - Improved loading performance
# - More efficient updates
#
VITE_FEATURE_ENABLE_CODE_SPLITTING=true

# ============================================================================
# FEATURE FLAGS - MONITORING
# ============================================================================

# VITE_FEATURE_ENABLE_ANALYTICS - Advanced Analytics
# 🔧 Enable detailed usage analytics and user behavior tracking
# 📋 Valid values: true | false
# 🌟 Default: false
#
# Analytics Data:
# - User journey mapping
# - Feature usage statistics
# - Performance metrics correlation
# - A/B testing support
# - Conversion funnel analysis
# - User segmentation
#
# Privacy Compliance:
# - GDPR consent management
# - Data anonymization
# - User opt-out mechanisms
# - Cookie-less tracking options
# - Data retention policies
#
VITE_FEATURE_ENABLE_ANALYTICS=false

# VITE_FEATURE_ENABLE_ERROR_REPORTING - Enhanced Error Reporting
# 🔧 Advanced error reporting with context and user feedback
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Enhanced Features:
# - User feedback collection on errors
# - Screenshot capture on critical errors
# - User session replay for debugging
# - Custom error context injection
# - Error grouping and deduplication
# - Automatic error classification
#
# Integration Options:
# - Sentry with user feedback
# - Custom error reporting service
# - Slack/Teams error notifications
# - Issue tracker integration (Jira, GitHub)
#
VITE_FEATURE_ENABLE_ERROR_REPORTING=true

# VITE_FEATURE_ENABLE_PERFORMANCE_MONITORING - Performance Analytics
# 🔧 Comprehensive performance monitoring and optimization
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Performance Metrics:
# - Core Web Vitals tracking
# - Custom performance marks
# - API response time monitoring
# - Bundle size tracking
# - Memory usage profiling
# - Network performance analysis
#
# Optimization Insights:
# - Performance regression detection
# - Bottleneck identification
# - User experience scoring
# - Performance budgets
# - Automated alerts
#
VITE_FEATURE_ENABLE_PERFORMANCE_MONITORING=true

# VITE_FEATURE_ENABLE_WEB_VITALS - Core Web Vitals Tracking
# 🔧 Monitor Google's Core Web Vitals metrics
# 📋 Valid values: true | false
# 🌟 Default: true
#
# Tracked Metrics:
# - LCP (Largest Contentful Paint) - Loading performance
# - FID (First Input Delay) - Interactivity
# - CLS (Cumulative Layout Shift) - Visual stability
# - FCP (First Contentful Paint) - Loading
# - TTFB (Time to First Byte) - Server response
#
# Benefits:
# - SEO ranking improvement
# - User experience optimization
# - Performance benchmarking
# - Regression detection
# - Competitive analysis
#
VITE_FEATURE_ENABLE_WEB_VITALS=true

# ============================================================================
# FEATURE FLAGS - DEVELOPMENT & TESTING
# ============================================================================

# VITE_FEATURE_ENABLE_DEV_TOOLS - Development Tools
# 🔧 Enable additional debugging and development tools
# 📋 Valid values: true | false
# 🌟 Default: true (development only)
#
# Development Tools:
# - Redux DevTools integration
# - Component inspector overlay
# - Performance profiler
# - Network request logger
# - State change logger
# - Hot reload indicators
#
# Note: Automatically disabled in production builds
# Use for debugging complex state management and performance issues
#
VITE_FEATURE_ENABLE_DEV_TOOLS=true

# VITE_FEATURE_ENABLE_DEBUG_MODE - Debug Mode
# 🔧 Enable verbose debugging information and tools
# 📋 Valid values: true | false
# 🌟 Default: true (development only)
#
# Debug Features:
# - Verbose console logging
# - Component render tracking
# - API request/response logging
# - State change notifications
# - Performance timing logs
# - Error stack trace enhancement
#
# Security Note: Automatically disabled in production
# May expose sensitive information - use only in development
#
VITE_FEATURE_ENABLE_DEBUG_MODE=true

# VITE_FEATURE_ENABLE_TEST_MODE - Testing Utilities
# 🔧 Enable testing utilities and mock data
# 📋 Valid values: true | false
# 🌟 Default: false (true in test environment)
#
# Testing Features:
# - Mock API responses
# - Test data generators
# - Component testing helpers
# - E2E testing utilities
# - Performance testing tools
# - Accessibility testing aids
#
# Note: Only activate in test environments
# Can interfere with normal application behavior
#
VITE_FEATURE_ENABLE_TEST_MODE=false

# ============================================================================
# ADVANCED CONFIGURATION OPTIONS
# ============================================================================

# The following variables are optional and provide additional customization
# Uncomment and modify as needed for advanced use cases

# API Configuration
# VITE_API_VERSION=v1                           # API version to use
# VITE_API_RATE_LIMIT_REQUESTS=100              # Client-side rate limiting
# VITE_API_RATE_LIMIT_WINDOW=60000              # Rate limit window (ms)
# VITE_API_RETRY_ATTEMPTS=3                     # Failed request retry count
# VITE_API_RETRY_DELAY=1000                     # Retry delay (ms)

# File Upload Configuration
# VITE_MAX_FILE_SIZE_MB=100                     # Maximum file size
# VITE_MAX_TOTAL_SIZE_MB=500                    # Maximum total upload size
# VITE_CHUNK_SIZE_MB=5                          # Upload chunk size
# VITE_ALLOWED_FILE_TYPES=.pdf,.doc,.docx,.txt # Allowed file extensions
# VITE_MAX_FILES_PER_UPLOAD=10                  # Maximum files per batch

# UI Configuration
# VITE_DEFAULT_THEME=light                      # Default theme (light/dark)
# VITE_ANIMATION_DURATION_MS=300                # UI animation duration
# VITE_DEBOUNCE_DELAY_MS=300                    # Input debounce delay
# VITE_NOTIFICATION_TIMEOUT_MS=5000             # Notification display time
# VITE_TOOLTIP_DELAY_MS=500                     # Tooltip show delay

# Cache Configuration
# VITE_CACHE_TTL_MINUTES=30                     # Cache time-to-live
# VITE_CACHE_MAX_SIZE_MB=50                     # Maximum cache size
# VITE_CACHE_STRATEGY=stale-while-revalidate    # Cache strategy

# Internationalization
# VITE_DEFAULT_LOCALE=en-US                     # Default language/locale
# VITE_SUPPORTED_LOCALES=en-US,es-ES,fr-FR     # Supported languages
# VITE_FALLBACK_LOCALE=en-US                    # Fallback language
# VITE_RTL_LOCALES=ar,he                        # Right-to-left languages

# Security Configuration
# VITE_CSP_NONCE=                               # Content Security Policy nonce
# VITE_ENABLE_CSRF_PROTECTION=true              # CSRF protection
# VITE_SESSION_TIMEOUT_MINUTES=30               # User session timeout
# VITE_PASSWORD_MIN_LENGTH=8                    # Minimum password length

# Performance Configuration
# VITE_PREFETCH_ROUTES=true                     # Prefetch route components
# VITE_PRELOAD_CRITICAL_RESOURCES=true          # Preload critical assets
# VITE_LAZY_LOAD_THRESHOLD=100                  # Lazy loading trigger distance
# VITE_VIRTUAL_LIST_BUFFER=10                   # Virtual list buffer size

# ============================================================================
# ENVIRONMENT-SPECIFIC QUICK SETUP
# ============================================================================

# Uncomment one of the following blocks for quick environment setup:

# 🚀 PRODUCTION SETUP
# NODE_ENV=production
# VITE_API_BASE_URL=https://api.reviewpoint.com
# VITE_WS_URL=wss://api.reviewpoint.com/api/v1
# VITE_API_TIMEOUT=20000
# VITE_LOG_LEVEL=warn
# VITE_ENABLE_ANALYTICS=true
# VITE_APP_NAME=ReViewPoint
# VITE_APP_VERSION=1.0.0

# 🎭 STAGING SETUP  
# NODE_ENV=staging
# VITE_API_BASE_URL=https://api-staging.reviewpoint.com
# VITE_WS_URL=wss://api-staging.reviewpoint.com/api/v1
# VITE_API_TIMEOUT=15000
# VITE_LOG_LEVEL=info
# VITE_ENABLE_ANALYTICS=true
# VITE_APP_NAME=ReViewPoint (Staging)
# VITE_APP_VERSION=1.0.0-staging

# 🛠️ DEVELOPMENT SETUP
# NODE_ENV=development
# VITE_API_TIMEOUT=10000
# VITE_LOG_LEVEL=debug
# VITE_ENABLE_ANALYTICS=false
# VITE_APP_NAME=ReViewPoint (Dev)
# VITE_FEATURE_ENABLE_DEV_TOOLS=true
# VITE_FEATURE_ENABLE_DEBUG_MODE=true

# 🧪 TESTING SETUP
# NODE_ENV=test
# VITE_API_BASE_URL=http://localhost:8000
# VITE_API_TIMEOUT=5000
# VITE_LOG_LEVEL=error
# VITE_ENABLE_ANALYTICS=false
# VITE_APP_NAME=ReViewPoint (Test)
# VITE_FEATURE_ENABLE_TEST_MODE=true

# ============================================================================
# END OF CONFIGURATION
# ============================================================================
