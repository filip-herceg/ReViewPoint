/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/v1/auth/register": {
		/**
		 * Register a new user
		 * @description Registers a new user account and returns a JWT access token.
		 *
		 * **Steps:**
		 * 1. User submits registration data (email, password, name).
		 * 2. System validates input and checks for duplicate email.
		 * 3. On success, a new user is created and a JWT access token is returned.
		 *
		 * **Notes:**
		 * - Duplicate emails are not allowed.
		 * - Password must meet security requirements.
		 * - Rate limiting is applied to prevent abuse.
		 */
		post: operations["register_api_v1_auth_register_post"];
	};
	"/api/v1/auth/login": {
		/**
		 * User login
		 * @description Authenticates a user and returns a JWT access token.
		 *
		 * **Steps:**
		 * 1. User submits email and password.
		 * 2. System validates credentials and rate limits attempts.
		 * 3. On success, a JWT access token is returned.
		 *
		 * **Notes:**
		 * - Invalid credentials or too many attempts will result in errors.
		 * - Use the returned token for authenticated requests.
		 */
		post: operations["login_api_v1_auth_login_post"];
	};
	"/api/v1/auth/logout": {
		/**
		 * Logout user
		 * @description Logs out the current user and blacklists the access token.
		 *
		 * **Steps:**
		 * 1. User sends a logout request with a valid access token.
		 * 2. System blacklists the token and ends the session.
		 *
		 * **Notes:**
		 * - Blacklisted tokens cannot be reused.
		 * - Rate limiting is applied to prevent abuse.
		 */
		post: operations["logout_api_v1_auth_logout_post"];
	};
	"/api/v1/auth/refresh-token": {
		/**
		 * Refresh JWT access token
		 * @description Refreshes the JWT access token using a valid refresh token.
		 *
		 * **Steps:**
		 * 1. User provides a valid refresh token.
		 * 2. System validates the token and issues a new access token.
		 *
		 * **Notes:**
		 * - Expired or blacklisted tokens will be rejected.
		 * - Rate limiting is applied to prevent abuse.
		 */
		post: operations["refresh_token_api_v1_auth_refresh_token_post"];
	};
	"/api/v1/auth/request-password-reset": {
		/**
		 * Request password reset
		 * @description Initiates a password reset flow.
		 *
		 * **Steps:**
		 * 1. User submits email via this endpoint.
		 * 2. System sends a password reset link to the email if it exists.
		 * 3. User clicks the link and is directed to the reset form.
		 * 4. User completes the process via `/reset-password`.
		 *
		 * **Notes:**
		 * - For security, this endpoint always returns a success message, even if the email is not registered.
		 * - Rate limiting is applied to prevent abuse.
		 */
		post: operations["request_password_reset_api_v1_auth_request_password_reset_post"];
	};
	"/api/v1/auth/reset-password": {
		/**
		 * Reset password
		 * @description Completes the password reset flow using a valid reset token.
		 *
		 * **Steps:**
		 * 1. User receives a reset link from `/request-password-reset`.
		 * 2. User submits the token and new password to this endpoint.
		 * 3. System validates the token and updates the password.
		 *
		 * **Notes:**
		 * - The token must be valid and not expired.
		 * - Rate limiting is applied to prevent abuse.
		 */
		post: operations["reset_password_api_v1_auth_reset_password_post"];
	};
	"/api/v1/auth/me": {
		/**
		 * Get current user profile
		 * @description Returns the profile information of the currently authenticated user.
		 *
		 * **How it works:**
		 * - Requires a valid JWT Bearer token.
		 * - Returns user ID, email, name, bio, avatar, and timestamps.
		 */
		get: operations["get_me_api_v1_auth_me_get"];
	};
	"/api/v1/health": {
		/**
		 * Health check
		 * @description Returns the health status of the API and database connection, including uptime and dependency versions.
		 *
		 *     **Features:**
		 *     - Checks database connectivity
		 *     - Returns API/server uptime
		 *     - Returns dependency versions (Python, FastAPI, SQLAlchemy)
		 *     - Adds response time in headers
		 *
		 *     **Example:**
		 *     ```bash
		 *     curl https://api.reviewpoint.org/api/v1/health
		 *     ```
		 */
		get: operations["health_check_api_v1_health_get"];
	};
	"/api/v1/metrics": {
		/**
		 * Prometheus metrics
		 * @description Returns Prometheus-style metrics for uptime and database connection pool.
		 *
		 *     **Metrics Provided:**
		 *     - `app_uptime_seconds`: API uptime in seconds
		 *     - `db_pool_size`: Database connection pool size
		 *     - `db_pool_checkedin`: Idle connections
		 *     - `db_pool_checkedout`: Active connections
		 *     - `db_pool_overflow`: Overflow connections
		 *     - `db_pool_awaiting`: Awaiting connections
		 *
		 *     **Use case:**
		 *     - Monitoring with Prometheus or similar tools
		 *     - Health dashboards
		 */
		get: operations["metrics_api_v1_metrics_get"];
	};
	"/api/v1/users/export": {
		/**
		 * Export users as CSV (debug minimal)
		 * @description Export users as CSV (minimal).
		 * Raises:
		 *     HTTPException: If format is not 'csv'.
		 */
		get: operations["export_users_csv_api_v1_users_export_get"];
	};
	"/api/v1/users/export-alive": {
		/**
		 * Test endpoint for export router
		 * @description Test endpoint for export router.
		 * Returns:
		 *     ExportAliveResponse: Status dict.
		 */
		get: operations["export_alive_api_v1_users_export_alive_get"];
	};
	"/api/v1/users/export-full": {
		/**
		 * Export users as CSV (full)
		 * @description Export users as CSV (full).
		 * Returns:
		 *     Response: CSV file response.
		 */
		get: operations["export_users_full_csv_api_v1_users_export_full_get"];
	};
	"/api/v1/users/export-simple": {
		/**
		 * Simple test endpoint for debugging
		 * @description Simple test endpoint for debugging.
		 * Returns:
		 *     ExportSimpleResponse: Status dict.
		 */
		get: operations["export_simple_api_v1_users_export_simple_get"];
	};
	"/api/v1/users": {
		/**
		 * List users
		 * @description List users with optional filters.
		 * Raises:
		 *     HTTPException: If an unexpected error occurs.
		 */
		get: operations["list_users_api_v1_users_get"];
		/**
		 * Create a new user
		 * @description Create a new user.
		 * Raises:
		 *     HTTPException: If user already exists, data is invalid, or unexpected error occurs.
		 */
		post: operations["create_user_api_v1_users_post"];
	};
	"/api/v1/users/{user_id}": {
		/**
		 * Get user by ID
		 * @description Get user by ID.
		 * Raises:
		 *     HTTPException: If user not found or unexpected error occurs.
		 */
		get: operations["get_user_by_id_api_v1_users__user_id__get"];
		/**
		 * Update user information
		 * @description Update user information.
		 * Raises:
		 *     HTTPException: If user not found, email exists, invalid data, or unexpected error occurs.
		 */
		put: operations["update_user_api_v1_users__user_id__put"];
		/**
		 * Delete user
		 * @description Delete user by ID.
		 * Raises:
		 *     HTTPException: If user not found or unexpected error occurs.
		 */
		delete: operations["delete_user_api_v1_users__user_id__delete"];
	};
	"/api/v1/users/promote-admin": {
		/**
		 * Promote User To Admin Async
		 * @description Promote a user to admin by email. Only allowed in test mode.
		 *
		 * Args:
		 *     email (str): The email of the user to promote.
		 *     session (AsyncSession): The SQLAlchemy async session.
		 *
		 * Returns:
		 *     PromoteAdminResponse: A dict with a detail message.
		 *
		 * Raises:
		 *     HTTPException: If not in test mode (403) or user not found (404).
		 */
		post: operations["promote_user_to_admin_async_api_v1_users_promote_admin_post"];
	};
	"/api/v1/uploads/root-test": {
		/**
		 * Root level test endpoint
		 * @description **Diagnostic Endpoint**
		 *
		 *     Checks if the uploads router is registered and responding. Useful for debugging router registration issues.
		 *
		 *     **Returns:**
		 *     - JSON status and router name.
		 */
		get: operations["uploads_main_root_test"];
	};
	"/api/v1/uploads/test-alive": {
		/**
		 * Test endpoint for router registration
		 * @description **Health Check**
		 *
		 *     Confirms the uploads router is active and properly registered. Returns a simple status JSON object.
		 *
		 *     **Use case:**
		 *     - Health checks
		 *     - Integration tests
		 */
		get: operations["_test_alive_response_api_v1_uploads_test_alive_get"];
	};
	"/api/v1/uploads/export-alive": {
		/**
		 * Test endpoint for export router
		 * @description **Export Router Health Check**
		 *
		 *     Returns 200 if the uploads export router is active. Used for integration and deployment checks.
		 */
		get: operations["_export_alive_response_api_v1_uploads_export_alive_get"];
	};
	"/api/v1/uploads/export-test": {
		/**
		 * Test endpoint for export router
		 * @description **Export Router Test**
		 *
		 *     Returns 200 if the uploads export router is active. Requires authentication.
		 *
		 *     **Returns:**
		 *     - JSON status
		 *     - Current user ID (if authenticated)
		 */
		get: operations["export_test_api_v1_uploads_export_test_get"];
	};
	"/api/v1/uploads/export": {
		/**
		 * Export files as CSV
		 * @description **Export Operation**
		 *
		 *     Exports the list of uploaded files as a CSV file.
		 *
		 *     **Steps:**
		 *     1. Authenticated user requests export.
		 *     2. Server filters and sorts files as requested.
		 *     3. Returns a CSV with filename and URL columns.
		 *
		 *     **Notes:**
		 *     - Supports filtering by creation date and filename.
		 *     - Rate limiting and authentication required.
		 */
		get: operations["export_files_csv_api_v1_uploads_export_get"];
	};
	"/api/v1/uploads": {
		/**
		 * List all uploaded files
		 * @description **File Listing**
		 *
		 *     Returns a paginated list of all uploaded files for the current user.
		 *
		 *     **How it works:**
		 *     1. The server retrieves files uploaded by the current user.
		 *     2. Files can be filtered and sorted.
		 *     3. Returns a list of files with pagination information.
		 *
		 *     **Notes:**
		 *     - Supports filtering by filename and creation date.
		 *     - Supports sorting by creation date or filename.
		 *     - Supports field selection to limit the returned data.
		 */
		get: operations["list_files_api_v1_uploads_get"];
		/**
		 * Upload a file
		 * @description **File Upload**
		 *
		 *     Uploads a file and returns its filename and URL.
		 *
		 *     **How it works:**
		 *     1. User sends a file using multipart/form-data.
		 *     2. The server validates the file type and size.
		 *     3. If valid, the file is saved and a URL is returned.
		 *
		 *     **Notes:**
		 *     - Only certain file types may be allowed (e.g., PDF, images).
		 *     - File size limits and rate limiting may apply.
		 *     - Use the returned URL to access or download the file.
		 */
		post: operations["upload_file_api_v1_uploads_post"];
	};
	"/api/v1/uploads/{filename}": {
		/**
		 * Get uploaded file info
		 * @description Retrieves metadata for an uploaded file by filename.
		 */
		get: operations["get_file_api_v1_uploads__filename__get"];
		/**
		 * Delete uploaded file
		 * @description Deletes an uploaded file by filename.
		 */
		delete: operations["delete_file_by_filename_api_v1_uploads__filename__delete"];
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		/** AuthResponse */
		AuthResponse: {
			/** Access Token */
			access_token: string;
			/** Refresh Token */
			refresh_token: string;
			/**
			 * Token Type
			 * @default bearer
			 * @constant
			 */
			token_type?: "bearer";
		};
		/** Body_promote_user_to_admin_async_api_v1_users_promote_admin_post */
		Body_promote_user_to_admin_async_api_v1_users_promote_admin_post: {
			/** Email */
			email: string;
		};
		/** Body_upload_file_api_v1_uploads_post */
		Body_upload_file_api_v1_uploads_post: {
			/**
			 * File
			 * Format: binary
			 * @description The file to upload. Must be a valid file type.
			 */
			file: string;
		};
		/** DBStatusDict */
		DBStatusDict: {
			/** Ok */
			ok?: boolean;
			/** Error */
			error?: string | null;
			pool?: components["schemas"]["PoolStatsDict"];
		};
		/** ExportAliveResponse */
		ExportAliveResponse: {
			/**
			 * Status
			 * @constant
			 */
			status: "users export alive";
		};
		/** ExportSimpleResponse */
		ExportSimpleResponse: {
			/**
			 * Users
			 * @constant
			 */
			users: "export simple status";
		};
		/** FileDict */
		FileDict: {
			/** Filename */
			filename?: string;
			/** Url */
			url?: string;
		};
		/** FileListResponse */
		FileListResponse: {
			/** Files */
			files: components["schemas"]["FileDict"][];
			/** Total */
			total: number;
		};
		/**
		 * FileUploadResponse
		 * @example {
		 *   "filename": "document.pdf",
		 *   "url": "/uploads/document.pdf"
		 * }
		 */
		FileUploadResponse: {
			/** Filename */
			filename: string;
			/** Url */
			url: string;
		};
		/** HTTPValidationError */
		HTTPValidationError: {
			/** Detail */
			detail?: components["schemas"]["ValidationError"][];
		};
		/** HealthResponseDict */
		HealthResponseDict: {
			/**
			 * Status
			 * @enum {string}
			 */
			status?: "ok" | "error";
			db?: components["schemas"]["DBStatusDict"];
			/** Uptime */
			uptime?: number;
			/** Response Time */
			response_time?: number;
			versions?: components["schemas"]["VersionsDict"];
			/** Detail */
			detail?: string | null;
		};
		/** MessageResponse */
		MessageResponse: {
			/** Message */
			message: string;
		};
		/** PasswordResetConfirmRequest */
		PasswordResetConfirmRequest: {
			/** Token */
			token: string;
			/** New Password */
			new_password: string;
		};
		/** PasswordResetRequest */
		PasswordResetRequest: {
			/**
			 * Email
			 * Format: email
			 */
			email: string;
		};
		/** PoolStatsDict */
		PoolStatsDict: {
			/** Size */
			size?: number | null;
			/** Checkedin */
			checkedin?: number | null;
			/** Checkedout */
			checkedout?: number | null;
			/** Overflow */
			overflow?: number | null;
			/** Awaiting */
			awaiting?: number | null;
		};
		/** PromoteAdminResponse */
		PromoteAdminResponse: {
			/** Detail */
			detail: string;
		};
		/** UserCreateRequest */
		UserCreateRequest: {
			/** Email */
			email: string;
			/** Password */
			password: string;
			/** Name */
			name: string;
		};
		/** UserListResponse */
		UserListResponse: {
			/** Users */
			users: components["schemas"]["UserProfile"][];
			/** Total */
			total: number;
		};
		/** UserLoginRequest */
		UserLoginRequest: {
			/**
			 * Email
			 * Format: email
			 */
			email: string;
			/** Password */
			password: string;
		};
		/** UserProfile */
		UserProfile: {
			/** Id */
			id: number;
			/** Email */
			email: string;
			/** Name */
			name?: string | null;
			/** Bio */
			bio?: string | null;
			/** Avatar Url */
			avatar_url?: string | null;
			/** Created At */
			created_at?: string | null;
			/** Updated At */
			updated_at?: string | null;
		};
		/** UserRegisterRequest */
		UserRegisterRequest: {
			/**
			 * Email
			 * Format: email
			 */
			email: string;
			/** Password */
			password: string;
			/** Name */
			name?: string | null;
		};
		/** ValidationError */
		ValidationError: {
			/** Location */
			loc: (string | number)[];
			/** Message */
			msg: string;
			/** Error Type */
			type: string;
		};
		/** VersionsDict */
		VersionsDict: {
			/** Python */
			python: string;
			/** Fastapi */
			fastapi: string | null;
			/** Sqlalchemy */
			sqlalchemy: string | null;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
	/**
	 * Register a new user
	 * @description Registers a new user account and returns a JWT access token.
	 *
	 * **Steps:**
	 * 1. User submits registration data (email, password, name).
	 * 2. System validates input and checks for duplicate email.
	 * 3. On success, a new user is created and a JWT access token is returned.
	 *
	 * **Notes:**
	 * - Duplicate emails are not allowed.
	 * - Password must meet security requirements.
	 * - Rate limiting is applied to prevent abuse.
	 */
	register_api_v1_auth_register_post: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserRegisterRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			201: {
				content: {
					"application/json": components["schemas"]["AuthResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * User login
	 * @description Authenticates a user and returns a JWT access token.
	 *
	 * **Steps:**
	 * 1. User submits email and password.
	 * 2. System validates credentials and rate limits attempts.
	 * 3. On success, a JWT access token is returned.
	 *
	 * **Notes:**
	 * - Invalid credentials or too many attempts will result in errors.
	 * - Use the returned token for authenticated requests.
	 */
	login_api_v1_auth_login_post: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserLoginRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["AuthResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Logout user
	 * @description Logs out the current user and blacklists the access token.
	 *
	 * **Steps:**
	 * 1. User sends a logout request with a valid access token.
	 * 2. System blacklists the token and ends the session.
	 *
	 * **Notes:**
	 * - Blacklisted tokens cannot be reused.
	 * - Rate limiting is applied to prevent abuse.
	 */
	logout_api_v1_auth_logout_post: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["MessageResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Refresh JWT access token
	 * @description Refreshes the JWT access token using a valid refresh token.
	 *
	 * **Steps:**
	 * 1. User provides a valid refresh token.
	 * 2. System validates the token and issues a new access token.
	 *
	 * **Notes:**
	 * - Expired or blacklisted tokens will be rejected.
	 * - Rate limiting is applied to prevent abuse.
	 */
	refresh_token_api_v1_auth_refresh_token_post: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		requestBody: {
			content: {
				"application/json": {
					[key: string]: unknown;
				};
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["AuthResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Request password reset
	 * @description Initiates a password reset flow.
	 *
	 * **Steps:**
	 * 1. User submits email via this endpoint.
	 * 2. System sends a password reset link to the email if it exists.
	 * 3. User clicks the link and is directed to the reset form.
	 * 4. User completes the process via `/reset-password`.
	 *
	 * **Notes:**
	 * - For security, this endpoint always returns a success message, even if the email is not registered.
	 * - Rate limiting is applied to prevent abuse.
	 */
	request_password_reset_api_v1_auth_request_password_reset_post: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PasswordResetRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["MessageResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Reset password
	 * @description Completes the password reset flow using a valid reset token.
	 *
	 * **Steps:**
	 * 1. User receives a reset link from `/request-password-reset`.
	 * 2. User submits the token and new password to this endpoint.
	 * 3. System validates the token and updates the password.
	 *
	 * **Notes:**
	 * - The token must be valid and not expired.
	 * - Rate limiting is applied to prevent abuse.
	 */
	reset_password_api_v1_auth_reset_password_post: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PasswordResetConfirmRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["MessageResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Get current user profile
	 * @description Returns the profile information of the currently authenticated user.
	 *
	 * **How it works:**
	 * - Requires a valid JWT Bearer token.
	 * - Returns user ID, email, name, bio, avatar, and timestamps.
	 */
	get_me_api_v1_auth_me_get: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["UserProfile"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Health check
	 * @description Returns the health status of the API and database connection, including uptime and dependency versions.
	 *
	 *     **Features:**
	 *     - Checks database connectivity
	 *     - Returns API/server uptime
	 *     - Returns dependency versions (Python, FastAPI, SQLAlchemy)
	 *     - Adds response time in headers
	 *
	 *     **Example:**
	 *     ```bash
	 *     curl https://api.reviewpoint.org/api/v1/health
	 *     ```
	 */
	health_check_api_v1_health_get: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		responses: {
			/** @description API and database are healthy */
			200: {
				content: {
					"application/json": components["schemas"]["HealthResponseDict"];
				};
			};
			/** @description Validation error. */
			400: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unauthorized. Missing or invalid authentication. */
			401: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Forbidden. Not enough permissions. */
			403: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unprocessable Entity. Invalid input. */
			422: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Too many requests. */
			429: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Internal server error. */
			500: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Database unavailable or service unavailable. */
			503: {
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	/**
	 * Prometheus metrics
	 * @description Returns Prometheus-style metrics for uptime and database connection pool.
	 *
	 *     **Metrics Provided:**
	 *     - `app_uptime_seconds`: API uptime in seconds
	 *     - `db_pool_size`: Database connection pool size
	 *     - `db_pool_checkedin`: Idle connections
	 *     - `db_pool_checkedout`: Active connections
	 *     - `db_pool_overflow`: Overflow connections
	 *     - `db_pool_awaiting`: Awaiting connections
	 *
	 *     **Use case:**
	 *     - Monitoring with Prometheus or similar tools
	 *     - Health dashboards
	 */
	metrics_api_v1_metrics_get: {
		responses: {
			/** @description Prometheus metrics in plain text */
			200: {
				content: {
					"application/json": unknown;
					"text/plain": unknown;
				};
			};
			/** @description Validation error. */
			400: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unauthorized. Missing or invalid authentication. */
			401: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Forbidden. Not enough permissions. */
			403: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unprocessable Entity. Invalid input. */
			422: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Too many requests. */
			429: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Internal server error. */
			500: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Service unavailable. */
			503: {
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	/**
	 * Export users as CSV (debug minimal)
	 * @description Export users as CSV (minimal).
	 * Raises:
	 *     HTTPException: If format is not 'csv'.
	 */
	export_users_csv_api_v1_users_export_get: {
		parameters: {
			query?: {
				/** @description Filter by email */
				email?: string | null;
				/** @description Export format (only csv supported) */
				format?: string | null;
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: never;
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Test endpoint for export router
	 * @description Test endpoint for export router.
	 * Returns:
	 *     ExportAliveResponse: Status dict.
	 */
	export_alive_api_v1_users_export_alive_get: {
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["ExportAliveResponse"];
				};
			};
		};
	};
	/**
	 * Export users as CSV (full)
	 * @description Export users as CSV (full).
	 * Returns:
	 *     Response: CSV file response.
	 */
	export_users_full_csv_api_v1_users_export_full_get: {
		responses: {
			/** @description Successful Response */
			200: {
				content: never;
			};
		};
	};
	/**
	 * Simple test endpoint for debugging
	 * @description Simple test endpoint for debugging.
	 * Returns:
	 *     ExportSimpleResponse: Status dict.
	 */
	export_simple_api_v1_users_export_simple_get: {
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["ExportSimpleResponse"];
				};
			};
		};
	};
	/**
	 * List users
	 * @description List users with optional filters.
	 * Raises:
	 *     HTTPException: If an unexpected error occurs.
	 */
	list_users_api_v1_users_get: {
		parameters: {
			query?: {
				/** @description Filter by email */
				email?: string | null;
				/** @description Filter by name */
				name?: string | null;
				/** @description Filter by created_after datetime */
				created_after?: string | null;
				/** @description Number of items to skip (offset) */
				offset?: number;
				/** @description Max number of items to return (max 100) */
				limit?: number;
			};
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["UserListResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Create a new user
	 * @description Create a new user.
	 * Raises:
	 *     HTTPException: If user already exists, data is invalid, or unexpected error occurs.
	 */
	create_user_api_v1_users_post: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserCreateRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			201: {
				content: {
					"application/json": components["schemas"]["UserProfile"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Get user by ID
	 * @description Get user by ID.
	 * Raises:
	 *     HTTPException: If user not found or unexpected error occurs.
	 */
	get_user_by_id_api_v1_users__user_id__get: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
			path: {
				user_id: number;
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["UserProfile"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Update user information
	 * @description Update user information.
	 * Raises:
	 *     HTTPException: If user not found, email exists, invalid data, or unexpected error occurs.
	 */
	update_user_api_v1_users__user_id__put: {
		parameters: {
			path: {
				user_id: number;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserCreateRequest"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["UserProfile"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Delete user
	 * @description Delete user by ID.
	 * Raises:
	 *     HTTPException: If user not found or unexpected error occurs.
	 */
	delete_user_api_v1_users__user_id__delete: {
		parameters: {
			path: {
				user_id: number;
			};
		};
		responses: {
			/** @description Successful Response */
			204: {
				content: never;
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Promote User To Admin Async
	 * @description Promote a user to admin by email. Only allowed in test mode.
	 *
	 * Args:
	 *     email (str): The email of the user to promote.
	 *     session (AsyncSession): The SQLAlchemy async session.
	 *
	 * Returns:
	 *     PromoteAdminResponse: A dict with a detail message.
	 *
	 * Raises:
	 *     HTTPException: If not in test mode (403) or user not found (404).
	 */
	promote_user_to_admin_async_api_v1_users_promote_admin_post: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["Body_promote_user_to_admin_async_api_v1_users_promote_admin_post"];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": components["schemas"]["PromoteAdminResponse"];
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Root level test endpoint
	 * @description **Diagnostic Endpoint**
	 *
	 *     Checks if the uploads router is registered and responding. Useful for debugging router registration issues.
	 *
	 *     **Returns:**
	 *     - JSON status and router name.
	 */
	uploads_main_root_test: {
		responses: {
			/** @description Root test successful */
			200: {
				content: {
					"application/json": {
						[key: string]: string;
					};
				};
			};
		};
	};
	/**
	 * Test endpoint for router registration
	 * @description **Health Check**
	 *
	 *     Confirms the uploads router is active and properly registered. Returns a simple status JSON object.
	 *
	 *     **Use case:**
	 *     - Health checks
	 *     - Integration tests
	 */
	_test_alive_response_api_v1_uploads_test_alive_get: {
		responses: {
			/** @description Router is alive */
			200: {
				content: {
					"application/json": {
						[key: string]: string;
					};
				};
			};
		};
	};
	/**
	 * Test endpoint for export router
	 * @description **Export Router Health Check**
	 *
	 *     Returns 200 if the uploads export router is active. Used for integration and deployment checks.
	 */
	_export_alive_response_api_v1_uploads_export_alive_get: {
		responses: {
			/** @description Export router is alive */
			200: {
				content: {
					"application/json": {
						[key: string]: string;
					};
				};
			};
		};
	};
	/**
	 * Test endpoint for export router
	 * @description **Export Router Test**
	 *
	 *     Returns 200 if the uploads export router is active. Requires authentication.
	 *
	 *     **Returns:**
	 *     - JSON status
	 *     - Current user ID (if authenticated)
	 */
	export_test_api_v1_uploads_export_test_get: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		responses: {
			/** @description Export router test successful */
			200: {
				content: {
					"application/json": {
						[key: string]: string;
					};
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Export files as CSV
	 * @description **Export Operation**
	 *
	 *     Exports the list of uploaded files as a CSV file.
	 *
	 *     **Steps:**
	 *     1. Authenticated user requests export.
	 *     2. Server filters and sorts files as requested.
	 *     3. Returns a CSV with filename and URL columns.
	 *
	 *     **Notes:**
	 *     - Supports filtering by creation date and filename.
	 *     - Rate limiting and authentication required.
	 */
	export_files_csv_api_v1_uploads_export_get: {
		parameters: {
			query?: {
				/** @description Search by filename (partial match) */
				q?: string | null;
				/** @description Sort by field: created_at, filename */
				sort?: "created_at" | "filename";
				/** @description Sort order: asc or desc */
				order?: "desc" | "asc";
				/** @description Comma-separated list of fields to include in response (e.g. filename,url) */
				fields?: string | null;
				/** @description Filter files created before this datetime (ISO 8601, e.g. 2024-01-01T00:00:00Z) */
				created_before?: string | null;
				/** @description Filter files created after this datetime (ISO 8601, e.g. 2024-01-01T00:00:00Z) */
				created_after?: string | null;
				/** @description Number of items to skip (offset) */
				offset?: number;
				/** @description Max number of items to return (max 100) */
				limit?: number;
			};
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		responses: {
			/** @description Files exported as CSV */
			200: {
				content: {
					"application/json": unknown;
					"text/csv": unknown;
				};
			};
			/** @description Unauthorized. Missing or invalid authentication. */
			401: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Forbidden. Not enough permissions. */
			403: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unprocessable Entity. Invalid input. */
			422: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Too many requests. */
			429: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Internal server error. */
			500: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Service unavailable. */
			503: {
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	/**
	 * List all uploaded files
	 * @description **File Listing**
	 *
	 *     Returns a paginated list of all uploaded files for the current user.
	 *
	 *     **How it works:**
	 *     1. The server retrieves files uploaded by the current user.
	 *     2. Files can be filtered and sorted.
	 *     3. Returns a list of files with pagination information.
	 *
	 *     **Notes:**
	 *     - Supports filtering by filename and creation date.
	 *     - Supports sorting by creation date or filename.
	 *     - Supports field selection to limit the returned data.
	 */
	list_files_api_v1_uploads_get: {
		parameters: {
			query?: {
				/** @description Search term across all fields */
				q?: string | null;
				/** @description Comma-separated list of fields to include */
				fields?: string | null;
				/** @description Field to sort by */
				sort?: "created_at" | "filename";
				/** @description Sort order (asc or desc) */
				order?: "desc" | "asc";
				/** @description Filter by creation date (ISO format) */
				created_after?: string | null;
				/** @description Filter by creation date (ISO format) */
				created_before?: string | null;
				/** @description Number of items to skip (offset) */
				offset?: number;
				/** @description Max number of items to return (max 100) */
				limit?: number;
			};
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		responses: {
			/** @description Files found */
			200: {
				content: {
					"application/json": components["schemas"]["FileListResponse"];
				};
			};
			/** @description Unauthorized. Missing or invalid authentication. */
			401: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Validation Error */
			422: {
				content: {
					"application/json": components["schemas"]["HTTPValidationError"];
				};
			};
		};
	};
	/**
	 * Upload a file
	 * @description **File Upload**
	 *
	 *     Uploads a file and returns its filename and URL.
	 *
	 *     **How it works:**
	 *     1. User sends a file using multipart/form-data.
	 *     2. The server validates the file type and size.
	 *     3. If valid, the file is saved and a URL is returned.
	 *
	 *     **Notes:**
	 *     - Only certain file types may be allowed (e.g., PDF, images).
	 *     - File size limits and rate limiting may apply.
	 *     - Use the returned URL to access or download the file.
	 */
	upload_file_api_v1_uploads_post: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
		};
		requestBody: {
			content: {
				/**
				 * @example {
				 *   "file": "(binary file, e.g. document.pdf)"
				 * }
				 */
				"multipart/form-data": components["schemas"]["Body_upload_file_api_v1_uploads_post"];
			};
		};
		responses: {
			/** @description File uploaded successfully */
			201: {
				content: {
					"application/json": components["schemas"]["FileUploadResponse"];
				};
			};
			/** @description Invalid file */
			400: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unauthorized. Missing or invalid authentication. */
			401: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description File too large. */
			413: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unsupported Media Type. */
			415: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unprocessable Entity. Invalid input. */
			422: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Too many requests. */
			429: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Internal server error. */
			500: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Service unavailable. */
			503: {
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	/**
	 * Get uploaded file info
	 * @description Retrieves metadata for an uploaded file by filename.
	 */
	get_file_api_v1_uploads__filename__get: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
			path: {
				/** @description The name of the file to retrieve. */
				filename: string;
			};
		};
		responses: {
			/** @description File found */
			200: {
				content: {
					"application/json": components["schemas"]["FileUploadResponse"];
				};
			};
			/** @description Unauthorized. Missing or invalid authentication. */
			401: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Forbidden. Not enough permissions. */
			403: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description File not found */
			404: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unprocessable Entity. Invalid filename. */
			422: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Too many requests. */
			429: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Internal server error. */
			500: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Service unavailable. */
			503: {
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	/**
	 * Delete uploaded file
	 * @description Deletes an uploaded file by filename.
	 */
	delete_file_by_filename_api_v1_uploads__filename__delete: {
		parameters: {
			header?: {
				"X-API-Key"?: string | null;
			};
			path: {
				/** @description The name of the file to delete. */
				filename: string;
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description File deleted successfully */
			204: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unauthorized. Missing or invalid authentication. */
			401: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Forbidden. Not enough permissions. */
			403: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description File not found */
			404: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Unprocessable Entity. Invalid filename. */
			422: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Too many requests. */
			429: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Internal server error. */
			500: {
				content: {
					"application/json": unknown;
				};
			};
			/** @description Service unavailable. */
			503: {
				content: {
					"application/json": unknown;
				};
			};
		};
	};
}
