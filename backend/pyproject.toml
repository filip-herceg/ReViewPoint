[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "backend"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "filip-herceg", email = "pvt.filip.herceg@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "fastapi>=0.115.6",
  "uvicorn[standard]>=0.32.1",
  "sqlalchemy>=2.0.36",
  "alembic>=1.14.0",
  "psycopg2-binary>=2.9.10",
  "python-multipart>=0.0.18",
  "python-jose[cryptography]>=3.3.0",
  "passlib[bcrypt]>=1.7.4",
  "bcrypt>=4.0.1,<4.1.0",  # Ensure compatible bcrypt version for passlib
  "python-dotenv>=1.0.1",
  "structlog>=23.1.0",
  "pydantic-settings==2.0.3",
  "aiosqlite==0.20.0",
  "starlette>=0.46.2",
  "autopep8>=2.3.2",
  "loguru>=0.7.3",
  "pydantic[email]>=2.0.0,<3.0.0",
  "pytest>=8.3.4",
  "pytest-asyncio>=0.24.0",
  "pytest-cov>=6.0.0",
  "pytest-mock>=3.14.0",
  "httpx>=0.28.1",
  "pytest-loguru>=0.2.0",
  "factory_boy>=3.3.0",
  "asyncpg>=0.29.0",
  "pytest-xdist>=3.6.1"
]

[project.urls]
Documentation = "https://github.com/filip-herceg/backend#readme"
Issues = "https://github.com/filip-herceg/backend/issues"
Source = "https://github.com/filip-herceg/backend"

[tool.hatch.version]
path = "src/__about__.py"

[tool.hatch.envs.default]
# Default virtual environment path
path = ".venv"
dependencies = [
  "pytest>=8.3.4",
  "pytest-asyncio>=0.24.0",
  "pytest-cov>=6.0.0",
  "pytest-mock>=3.14.0",
  "httpx>=0.28.1",
  "black>=24.10.0",
  "ruff>=0.8.4",
  "mypy>=1.13.0",
  "pytest-loguru>=0.2.0",
  "types-passlib>=1.7.7.20240901",
  "types-python-jose",
  "testcontainers",
]
env-vars = { PYTHONPATH = "src", REVIEWPOINT_TEST_LOG_LEVEL = "INFO" }

[tool.hatch.envs.default.scripts]
test = "pytest --log-cli-level={env:REVIEWPOINT_TEST_LOG_LEVEL:INFO} {args}"
test-debug = "pytest --log-cli-level=DEBUG {args}"
test-quiet = "pytest --log-cli-level=WARNING {args}"

[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src tests}"

# Fast test environment for rapid development
[tool.hatch.envs.fast]
path = ".venv-fast"
dependencies = [
  "pytest>=8.3.4",
  "pytest-asyncio>=0.24.0", 
  "pytest-mock>=3.14.0",
  "httpx>=0.28.1",
  "aiosqlite==0.20.0",
  "pytest-xdist>=3.6.1",
  "pytest-timeout>=2.1.0",
]
[tool.hatch.envs.fast.env-vars]
PYTHONPATH = "src"
FAST_TESTS = "1"
REVIEWPOINT_ENVIRONMENT = "test"
REVIEWPOINT_LOG_LEVEL = "WARNING"
REVIEWPOINT_TEST_LOG_LEVEL = "INFO"
REVIEWPOINT_DB_URL = "sqlite+aiosqlite:///:memory:"
REVIEWPOINT_FEATURE_AUTH_REGISTER = "true"
REVIEWPOINT_FEATURE_AUTH_LOGIN = "true"
REVIEWPOINT_FEATURE_AUTH_REQUEST_PASSWORD_RESET = "true"
REVIEWPOINT_FEATURE_AUTH_RESET_PASSWORD = "true"
REVIEWPOINT_FEATURE_AUTH_ME = "true"
REVIEWPOINT_FEATURE_AUTH_LOGOUT = "true"
REVIEWPOINT_FEATURE_AUTH_REFRESH_TOKEN = "true"
REVIEWPOINT_FEATURE_USERS_CREATE = "true"
REVIEWPOINT_FEATURE_USERS_GET = "true"
REVIEWPOINT_FEATURE_USERS_UPDATE = "true"
REVIEWPOINT_FEATURE_USERS_DELETE = "true"
REVIEWPOINT_FEATURE_USERS_LIST = "true"
REVIEWPOINT_FEATURE_UPLOADS_UPLOAD = "true"
REVIEWPOINT_FEATURE_UPLOADS_GET = "true"
REVIEWPOINT_FEATURE_UPLOADS_LIST = "true"
REVIEWPOINT_FEATURE_UPLOADS_UPDATE = "true"
REVIEWPOINT_FEATURE_UPLOADS_DELETE = "true"
REVIEWPOINT_FEATURE_UPLOADS_EXPORT = "true"
REVIEWPOINT_FEATURE_HEALTH_READ = "true"
REVIEWPOINT_API_KEY_ENABLED = "false"
REVIEWPOINT_API_KEY = "testkey"
REVIEWPOINT_EXTERNAL_SERVICES_ENABLED = "false"

[tool.hatch.envs.fast.scripts]
test = "python run-fast-tests.py {args}"
fast-only = "python run-fast-tests.py --fast-only {args}"
watch = "python run-fast-tests.py -f {args}"
coverage = "python run-fast-tests.py --cov=src --cov-report=html {args}"

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = ["E501", "B008", "C901"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"src/alembic_migrations/env.py" = ["B010"]
"src/tests/alembic_migrations/test_alembic_env.py" = ["B010"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_reexport = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
mypy_path = "src;tests"
explicit_package_bases = true

[tool.coverage.run]
source_pkgs = ["src", "tests"]
branch = true
parallel = true
omit = [
  "src/__about__.py",
  "tests/*",
  "*/migrations/*",
  "*/alembic/*",
  "*/__pycache__/*",
  "*/venv/*",
  "*/.venv/*"
]

[tool.coverage.paths]
backend = ["src", "*/backend/src"]
tests = ["tests", "*/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config --tb=short --log-cli-format='%(asctime)s [%(levelname)8s] %(name)s: %(message)s'"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_file = "tests/test_debug.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
markers = [
    "jwt: mark tests that require JWT handling",
    "performance: marks tests as performance (deselect with '-m \"not performance\"')",
    "slow: marks tests that access real database or are slow",
    "fast: marks tests that use mocks or in-memory DB"
]

[tool.hatch.build.targets.wheel]
packages = ["src"]
