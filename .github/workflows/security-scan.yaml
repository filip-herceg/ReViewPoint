name: Security Scan

on:
  # Use push triggers only for main/develop, not for PRs targeting these branches
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/security-scan.yaml'
  # Use pull_request triggers only for branches other than main/develop
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
    # This prevents duplicate runs when pushing to a PR branch
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  schedule:
    # Run security scan weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'

permissions:
  contents: read
  security-events: write # Required for GitHub Security tab integration

jobs:
  trivy-scan:
    name: Trivy Security Scan
    # Skip duplicate workflow runs
    # This prevents the workflow from running twice on PRs from the same repo
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        id: trivy-fs-sarif
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Run Trivy filesystem vulnerability scanner (table output for logs)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'table'
          exit-code: '0'  # Don't fail workflow twice for same issues
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy filesystem scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: success() && steps.trivy-fs-sarif.outcome == 'success'
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Set up build context with all necessary files
      - name: Set up build context
        run: |
          echo "Creating build context directory structure..."
          # Debug: Show directory structure before creating build context
          echo "Current directory structure:"
          find ./backend -type d | grep -v "__pycache__" | sort
          
          # Create a clean build context directory
          mkdir -p ./build_context
          
          # Copy essential files
          echo "Copying essential files..."
          cp ./backend/pyproject.toml ./build_context/ || echo "WARNING: pyproject.toml not found"
          
          # Handle README.md - create one if not found
          if [ -f "./backend/README.md" ]; then
            cp ./backend/README.md ./build_context/
            echo "README.md copied successfully"
          else
            echo "WARNING: README.md not found, creating a placeholder"
            echo "# Backend Project" > ./build_context/README.md
            echo "This is a placeholder README file generated during the build process." >> ./build_context/README.md
          fi
          
          cp ./backend/alembic.ini ./build_context/ || echo "WARNING: alembic.ini not found"
          
          # Create source directory and copy source files
          echo "Copying source files..."
          if [ -d "./backend/src" ]; then
            mkdir -p ./build_context/src
            cp -r ./backend/src/* ./build_context/src/ || echo "WARNING: No source files to copy"
          else
            echo "ERROR: Source directory not found at ./backend/src"
            ls -la ./backend
          fi
          
          # Create scripts directory and copy scripts
          echo "Copying scripts..."
          if [ -d "./backend/scripts" ]; then
            mkdir -p ./build_context/scripts
            cp -r ./backend/scripts/* ./build_context/scripts/ || echo "WARNING: No script files to copy"
          else
            echo "WARNING: Scripts directory not found at ./backend/scripts"
            mkdir -p ./build_context/scripts
            # Create a dummy script to prevent build errors
            echo '#!/bin/bash' > ./build_context/scripts/dummy.sh
            echo 'echo "This is a placeholder script"' >> ./build_context/scripts/dummy.sh
            chmod +x ./build_context/scripts/dummy.sh
          fi
          
          # Copy docker-entrypoint.sh to the root level
          echo "Copying entrypoint script..."
          if [ -f "./backend/deployment/docker/docker-entrypoint.sh" ]; then
            cp ./backend/deployment/docker/docker-entrypoint.sh ./build_context/
            echo "Entrypoint script copied successfully"
          else
            echo "WARNING: Entrypoint script not found, creating placeholder"
            echo '#!/bin/bash' > ./build_context/docker-entrypoint.sh
            echo 'set -e' >> ./build_context/docker-entrypoint.sh
            echo '# Execute the main command' >> ./build_context/docker-entrypoint.sh
            echo 'exec "$@"' >> ./build_context/docker-entrypoint.sh
            chmod +x ./build_context/docker-entrypoint.sh
          fi
          
          # Show the build context structure
          echo "Build context contents:"
          find ./build_context -type f | sort
          echo "Build context directory structure:"
          find ./build_context -type d | sort
          
          # Display the content of key files for debugging
          echo "Contents of docker-entrypoint.sh:"
          cat ./build_context/docker-entrypoint.sh

      # Debug: Show the Docker context and Dockerfile
      - name: Debug Docker build inputs
        run: |
          echo "Docker build context contents:"
          find ./build_context -type f | sort
          echo "----- Dockerfile contents -----"
          cat ./backend/deployment/docker/Dockerfile
          echo "-----------------------------"
          
      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./build_context
          file: ./backend/deployment/docker/Dockerfile
          push: false
          load: true
          tags: reviewpoint-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Display image digest
        run: echo "Image digest is ${{ steps.docker_build.outputs.digest }}"
        
      - name: List dependencies from the image
        run: |
          docker run --rm reviewpoint-backend:latest /bin/bash -c "source /app/.venv/bin/activate && pip freeze" > image-dependencies.txt || docker run --rm reviewpoint-backend:latest /app/.venv/bin/pip freeze > image-dependencies.txt
          echo "Python dependencies in the built image:"
          cat image-dependencies.txt
          
      - name: Check for outdated dependencies
        run: |
          docker run --rm reviewpoint-backend:latest /bin/bash -c "source /app/.venv/bin/activate && pip list --outdated" || docker run --rm reviewpoint-backend:latest /app/.venv/bin/pip list --outdated || echo "No outdated packages found"

      - name: Verify Docker image
        run: |
          echo "Listing all Docker images:"
          docker images
          echo "Inspecting reviewpoint-backend image:"
          docker inspect reviewpoint-backend:latest || echo "Image not found"
          
          # Check if the container can start
          echo "Attempting to start container to verify configuration:"
          docker run --rm reviewpoint-backend:latest echo "Container started successfully" || echo "Container failed to start"
          
          # Check if Python environment is working
          echo "Checking Python environment:"
          docker run --rm reviewpoint-backend:latest python -c "import sys; print(f'Python {sys.version} working')" || echo "Python check failed"
          
      - name: Run Trivy vulnerability scanner (Docker image)
        id: trivy-image-sarif
        uses: aquasecurity/trivy-action@master
        if: steps.docker_build.outcome == 'success'
        with:
          scan-type: 'image'
          image-ref: 'reviewpoint-backend:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
        continue-on-error: true
          
      - name: Run Trivy Docker image scanner (table output for logs)
        uses: aquasecurity/trivy-action@master
        if: steps.docker_build.outcome == 'success'
        with:
          scan-type: 'image'
          image-ref: 'reviewpoint-backend:latest'
          format: 'table'
          exit-code: '0'  # Don't fail workflow twice for same issues
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
          
      - name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.trivy-image-sarif.outcome == 'success' && steps.docker_build.outcome == 'success' && steps.trivy-image-sarif.conclusion != 'skipped'
        with:
          sarif_file: 'trivy-image-results.sarif'
          
      - name: Save filesystem scan artifact
        uses: actions/upload-artifact@v4
        if: always() && steps.trivy-fs-sarif.outcome == 'success'
        with:
          name: trivy-fs-scan-results
          path: trivy-fs-results.sarif

      - name: Save Docker image scan artifact
        uses: actions/upload-artifact@v4
        if: always() && steps.trivy-image-sarif.outcome == 'success' && steps.docker_build.outcome == 'success' && steps.trivy-image-sarif.conclusion != 'skipped'
        with:
          name: trivy-image-scan-results
          path: trivy-image-results.sarif
          
      - name: Report Build Status
        if: always()
        run: |
          echo "Docker Build Status: ${{ steps.docker_build.outcome }}"
          echo "Filesystem Scan Status: ${{ steps.trivy-fs-sarif.outcome }}"
          echo "Image Scan Status: ${{ steps.trivy-image-sarif.outcome }}"
          if [ "${{ steps.docker_build.outcome }}" != "success" ]; then
            echo "Docker build failed. Please check the build logs for details."
          elif [ "${{ steps.trivy-image-sarif.outcome }}" != "success" ] && [ "${{ steps.trivy-image-sarif.conclusion }}" != "skipped" ]; then
            echo "Security vulnerabilities found in the Docker image. Please review the Trivy scan results."
          elif [ "${{ steps.trivy-fs-sarif.outcome }}" != "success" ]; then
            echo "Security vulnerabilities found in the filesystem. Please review the Trivy scan results."
          else
            echo "All checks passed successfully!"
          fi
