name: Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/security-scan.yaml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:
  schedule:
    # Run security scan weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'

permissions:
  contents: read
  security-events: write # Required for GitHub Security tab integration

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        id: trivy-fs-sarif
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Run Trivy filesystem vulnerability scanner (table output for logs)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'table'
          exit-code: '0'  # Don't fail workflow twice for same issues
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy filesystem scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: success() && steps.trivy-fs-sarif.outcome == 'success'
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Fix Docker paths
      - name: Copy necessary files to correct location
        run: |
          mkdir -p ./backend/deployment/build_context
          cp ./backend/pyproject.toml ./backend/deployment/build_context/
          
          # Create necessary directories
          mkdir -p ./backend/deployment/build_context/src
          cp -r ./backend/src/* ./backend/deployment/build_context/src/ || echo "No source files found"
          mkdir -p ./backend/deployment/build_context/scripts
          cp -r ./backend/scripts/* ./backend/deployment/build_context/scripts/ || echo "No scripts found"
          mkdir -p ./backend/deployment/build_context/docker
          cp ./backend/deployment/docker/docker-entrypoint.sh ./backend/deployment/build_context/docker/ || echo "No entrypoint script found"
          
          # Copy __about__.py for version information if it exists
          mkdir -p ./backend/deployment/build_context/src/__about__.py || true
          cp ./backend/src/__about__.py ./backend/deployment/build_context/src/__about__.py || echo "No __about__.py file found"
          
          echo "Build context contents:"
          find ./backend/deployment/build_context -type f | sort

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./backend/deployment/build_context
          file: ./backend/deployment/docker/Dockerfile
          push: false
          load: true
          tags: reviewpoint-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Display image digest
        run: echo "Image digest is ${{ steps.docker_build.outputs.digest }}"
        
      - name: List dependencies from the image
        run: |
          docker run --rm reviewpoint-backend:latest /bin/bash -c "source /app/.venv/bin/activate && pip freeze" > image-dependencies.txt || docker run --rm reviewpoint-backend:latest /app/.venv/bin/pip freeze > image-dependencies.txt
          echo "Python dependencies in the built image:"
          cat image-dependencies.txt
          
      - name: Check for outdated dependencies
        run: |
          docker run --rm reviewpoint-backend:latest /bin/bash -c "source /app/.venv/bin/activate && pip list --outdated" || docker run --rm reviewpoint-backend:latest /app/.venv/bin/pip list --outdated || echo "No outdated packages found"

      - name: Verify Docker image
        run: |
          echo "Listing all Docker images:"
          docker images
          echo "Inspecting reviewpoint-backend image:"
          docker inspect reviewpoint-backend:latest || echo "Image not found"
          
      - name: Run Trivy vulnerability scanner (Docker image)
        id: trivy-image-sarif
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'reviewpoint-backend:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
          
      - name: Run Trivy Docker image scanner (table output for logs)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'reviewpoint-backend:latest'
          format: 'table'
          exit-code: '0'  # Don't fail workflow twice for same issues
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
          
      - name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: success() && steps.trivy-image-sarif.outcome == 'success' && steps.docker_build.outcome == 'success'
        with:
          sarif_file: 'trivy-image-results.sarif'
          
      - name: Save filesystem scan artifact
        uses: actions/upload-artifact@v4
        if: steps.trivy-fs-sarif.outcome == 'success'
        with:
          name: trivy-fs-scan-results
          path: trivy-fs-results.sarif

      - name: Save Docker image scan artifact
        uses: actions/upload-artifact@v4
        if: steps.trivy-image-sarif.outcome == 'success' && steps.docker_build.outcome == 'success'
        with:
          name: trivy-image-scan-results
          path: trivy-image-results.sarif
