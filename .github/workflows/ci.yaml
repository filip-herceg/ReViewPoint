name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yaml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Lint, Typecheck & Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: reviewpoint_test
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      REVIEWPOINT_TEST_DB_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/reviewpoint_test
      PYTHONPATH: ${{ github.workspace }}/backend/src
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --no-interaction

      - name: Wait for PostgreSQL
        run: |
          for i in {1..15}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"; break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        working-directory: ./backend
        run: poetry run alembic upgrade head

      - name: Run Black (Format Check)
        working-directory: ./backend
        run: poetry run black . --check

      - name: Run Ruff (Lint)
        working-directory: ./backend
        run: poetry run ruff check .

      - name: Run Mypy (Typecheck)
        working-directory: ./backend
        run: poetry run mypy .

      - name: Run Pytest (Tests)
        working-directory: ./backend
        run: poetry run pytest --maxfail=1 --disable-warnings --cov=backend --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true
